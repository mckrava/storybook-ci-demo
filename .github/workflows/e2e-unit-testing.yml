name: E2E and Unit Testing Flow
on:
  pull_request:
    branches:
      - develop

jobs:

  #  build_app:
  #    name: Build UI application
  #    runs-on: macos-11
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Install Node.js
  #        uses: actions/setup-node@v1
  #        with:
  #          node-version: 16.x
  #
  #      - name: Cache Node Modules for ui-app
  #        id: cache-node-modules-ui-app
  #        uses: actions/cache@v2
  #        with:
  #          path: node_modules
  #          key: node-modules-ui-app-${{ hashFiles('yarn.lock') }}
  #
  #      - name: Install Dependencies for ui-app
  #        if: steps.cache-node-modules-ui-app.outputs.cache-hit != 'true'
  #        run: rm -rf node_modules && yarn install --frozen-lockfile
  #
  #      - name: Update browserslist
  #        run: npx browserslist@latest --update-db
  #
  #      - name: Build App
  #        run: yarn run build:deployment
  #        env:
  #          CI: false
  #
  #      - name: Upload script files
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: script-files
  #          path: ./scripts
  #
  #      - name: Upload production-ready App build files
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: app-build-files
  #          path: ./build

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install Node.js HTTP-Server, wait-port
        run: yarn global add http-server wait-port

      - uses: actions/checkout@v2
        with:
          path: 'ui-app'

      #      - name: Download artifact - UI app build
      #        uses: actions/download-artifact@v2
      #        with:
      #          name: app-build-files
      #          path: ./ui-app/build


#      - name: Pull Testnet Docker image
#        shell: bash
#        run: docker pull public.ecr.aws/e4o7i5u6/polkadot-basilisk-testnet:0.1.23

      # Prepare Basilisk-api

      - name: Clone Basilisk-api
        run: git clone -b feature/dockerize-testnet https://github.com/galacticcouncil/Basilisk-api.git

      - name: Cache Node Modules for Basilisk-api
        id: cache-node-modules-basilisk-api
        uses: actions/cache@v2
        with:
          path: Basilisk-api/node_modules
          key: node-modules-basilisk-api-${{ hashFiles('Basilisk-api/yarn.lock') }}

      - name: Install Dependencies for Basilisk-api
        if: steps.cache-node-modules-basilisk-api.outputs.cache-hit != 'true'
        run: |
          cd Basilisk-api
          yarn

      # Install NPM deps for running tests
      - name: Cache Node Modules for ui-app
        id: cache-node-modules-ui-app
        uses: actions/cache@v2
        with:
          path: ui-app/node_modules
          key: node-modules-ui-app-${{ hashFiles('ui-app/yarn.lock') }}

      - name: Install Dependencies for ui-app
        if: steps.cache-node-modules-ui-app.outputs.cache-hit != 'true'
        run: |
          cd ui-app
          yarn

      # Update folders structure

      - name: Change folders permissions
        run: |
          chmod -R 777 Basilisk-api
          chmod -R 777 ui-app

      # Run testnet

      - name: Run testnet
        shell: bash
        timeout-minutes: 10
        run: |
          cd Basilisk-api
          yarn fullruntime:clean-setup-start

      - name: Wait for Basilisk Node port :9988
        shell: bash
        timeout-minutes: 5
        run: wait-port 9988

      # Run UI App

      - name: Run UI application
        shell: bash
        run: |
          cd ui-app/build
          http-server -s -p 3030 -a 127.0.0.1 &

      - name: Wait for UI app port :3030
        shell: bash
        timeout-minutes: 5
        run: wait-port 3030

      - name: Sleep for 3 seconds
        run: sleep 3s
        shell: bash

      # Prepare Playwright env

      - name: Install OS dependencies for Playwright
        run: npx playwright install-deps

      - name: Make e2e testing env vars file visible
        run: mv ui-app/.env.test.e2e.ci ui-app/e2e-tests-vars.txt
        shell: bash

      - name: Prepate E2E Tests Env Variables
        uses: falnyr/replace-env-vars-action@master
        env:
          E2E_TEST_ACCOUNT_NAME_ALICE: ${{ secrets.E2E_TEST_ACCOUNT_NAME_ALICE }}
          E2E_TEST_ACCOUNT_PASSWORD_ALICE: ${{ secrets.E2E_TEST_ACCOUNT_PASSWORD_ALICE }}
          E2E_TEST_ACCOUNT_SEED_ALICE: ${{ secrets.E2E_TEST_ACCOUNT_SEED_ALICE }}
        with:
          filename: ui-app/e2e-tests-vars.txt

      - name: Make e2e testing env vars file hidden
        run: mv ui-app/e2e-tests-vars.txt ui-app/.env.test.e2e.ci
        shell: bash

      - name: Check Docker containers
        if: always()
        run: docker ps
        shell: bash

      # Run e2e tests

      - name: Run e2e tests
        shell: bash
        run: |
          cd ui-app
          DEBUG=pw:browser* HEADFUL=true xvfb-run --auto-servernum -- yarn test:e2e-ci
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}

      - name: Sleep for 5 seconds
        run: sleep 5s
        shell: bash

      - name: Upload trace files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: traces_screenshots
          path: ./ui-app/traces

      - name: Upload e2e tests report file
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e_tests_report_html
          path: ./ui-app/ui-app-e2e-results.html

      - name: Run unit tests
        if: always()
        run: |
          cd ui-app
          yarn test:ci

      - name: Sleep for 5 seconds
        run: sleep 5s
        shell: bash

      - name: Upload unit tests report file
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unint_tests_report_html
          path: ./ui-app/ui-app-unit-tests-results.html

      - name: Upload testnet logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: testnet_logs
          path: ./Basilisk-api/testnet-logs

#  purge_testnet_artifacts:
#    name: Purge testnet artifacts
#    if: ${{ always() }}
#    runs-on: ubuntu-latest
#    needs: run_tests
#    steps:
#      - uses: geekyeggo/delete-artifact@v1
#        with:
#          name: |
#            basilisk-node-artifacts
#            polkadot-node-artifacts
#          failOnError: false
