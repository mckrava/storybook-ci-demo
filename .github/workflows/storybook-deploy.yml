name: Build & Deploy Storybook (Develop, Fix)
on:
  push:
    branches:
      - develop
      - 'fix/**'
      - 'feat/**'
  pull_request:
    branches:
      - 'fix/**'
      - 'feat/**'

# GH_PAGES_FULL_BRANCH - app-builds-gh-pages
# GH_PAGES_BRANCH - storybook-gh-pages

jobs:
  build:
    name: Build UI app and Storybook
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Checkout gh-pages branch existance
        shell: bash
        run: |
          git rev-parse --verify $GH_PAGES_FULL_BRANCH
        env:
          GH_PAGES_FULL_BRANCH: ${{ secrets.GH_PAGES_FULL_BRANCH }}


      - name: Checkout gh-pages branch existance
        shell: bash
        run: |
          IS_GHP_BRANCH_EXISTS=$(git show-ref --verify --quiet --heads GH_PAGES_FULL_BRANCH)
          echo ">>> $IS_GHP_BRANCH_EXISTS"
          if [ -n "$IS_GHP_BRANCH_EXISTS" ]; then
            echo "> true"
            echo "##[set-output name=is_ghp_branch_exists;]true"
          else
            echo "> false"
            echo "##[set-output name=is_ghp_branch_exists;]false"
          fi
        env:
          GH_PAGES_FULL_BRANCH: ${{ secrets.GH_PAGES_FULL_BRANCH }}
        id: ghp_branch_existance

      - name: Checkout gh-pages branch existance
        if: ${{ steps.ghp_branch_existance.outputs.is_ghp_branch_exists == 'true' }}
        shell: bash
        run: echo "Exist"

      - name: Checkout gh-pages branch existance
        if: ${{ steps.ghp_branch_existance.outputs.is_ghp_branch_exists == 'false' }}
        shell: bash
        run: echo "NOT Exist"
#
#      - uses: actions/checkout@v2
#
#      - name: Install Node.js
#        uses: actions/setup-node@v1
#        with:
#          node-version: 14.x
#
#      - name: Install NPM packages
#        run: |
#          npm install
#          npm ci
#
#      - name: Update browserslist
#        run: npx browserslist@latest --update-db
#
#      - name: Build project and Storybook
#        run: |
#          npm run build
#          npm run build-storybook -- -o sb-build-files
#        env:
#          CI: false
#
#      - name: Upload name sanitize script file
#        uses: actions/upload-artifact@v2
#        with:
#          name: sanitize-script-file
#          path: ./scripts/gh-actions-branch-name-serialize.sh
#
#
#      - name: Upload production-ready SB build files
#        uses: actions/upload-artifact@v2
#        with:
#          name: sb-build-files
#          path: ./sb-build-files
#
#      - name: Upload production-ready App build files
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-build-files
#          path: ./build
#
#  clear_build:
#    name: Clear existing build
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout gh-pages branch existance
#        shell: bash
#        run: |
#          IS_EXISTS=$(git show-ref refs/heads/$GH_PAGES_FULL_BRANCH)
#        env:
#          GH_PAGES_FULL_BRANCH: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#
#      - name: Checkout gh-pages branch
#        uses: actions/checkout@v2
#        with:
#          ref: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#
#      - name: Download artifact (sanitize script)
#        uses: actions/download-artifact@v2
#        with:
#          name: sanitize-script-file
#          path: ./scripts
#
#      - name: Update script file
#        shell: bash
#        run: chmod -R 777 ./scripts/gh-actions-branch-name-serialize.sh
#
#      - name: Extract branch folder name
#        shell: bash
#        run: |
#          if [[ $GITHUB_EVENT_NAME = 'push' ]]
#          then
#            echo "##[set-output name=folder_name;]$GITHUB_WORKSPACE/$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          elif [[ $GITHUB_EVENT_NAME = 'pull_request' ]]
#          then
#            echo "##[set-output name=folder_name;]$GITHUB_WORKSPACE/$(./scripts/gh-actions-branch-name-serialize.sh "$GITHUB_BASE_REF")"
#          else
#            echo "##[set-output name=folder_name;]$GITHUB_WORKSPACE/$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          fi
#        id: branch_folder_name
#
#      - name: Remove Existing build (app and storybook)
#        uses: JesseTG/rm@v1.0.2
#        if: ${{ success() }}
#        with:
#          path: ${{ steps.branch_folder_name.outputs.folder_name }}
#
#      - name: Remove redundant files from the current branch
#        shell: bash
#        run: rm -r ./scripts
#
#      - name: Commit changes
#        uses: stefanzweifel/git-auto-commit-action@v4
#        if: steps.auto-commit-action.outputs.changes_detected == 'true'
#        with:
#          branch: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#
#  deploy:
#    name: Deploy Storybook
#    if: ${{ always() && needs.build.result=='success' }}
#    needs: [build, clear_build]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Download artifact - Storybook (build files)
#        uses: actions/download-artifact@v2
#        with:
#          name: sb-build-files
#          path: ./sb-build-files
#
#      - name: Download artifact - App (build files)
#        uses: actions/download-artifact@v2
#        with:
#          name: app-build-files
#          path: ./app-build-files
#
#      - name: Download artifact (sanitize script)
#        uses: actions/download-artifact@v2
#        with:
#          name: sanitize-script-file
#          path: ./scripts
#
#      - name: Extract branch folder name
#        shell: bash
#        run: |
#          if [[ $GITHUB_EVENT_NAME = 'push' ]]
#          then
#            echo "##[set-output name=branch;]$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          elif [[ $GITHUB_EVENT_NAME = 'pull_request' ]]
#          then
#            echo "##[set-output name=branch;]$(./scripts/gh-actions-branch-name-serialize.sh "$GITHUB_BASE_REF")"
#          else
#            echo "##[set-output name=branch;]$(./scripts/gh-actions-branch-name-serialize.sh "${GITHUB_REF#refs/heads/}")"
#          fi
#        id: extract_branch
#
#      - name: Deploy Storybook to GH Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GH_TOKEN }}
#          publish_branch: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#          publish_dir: ./sb-build-files
#          destination_dir: ${{ format('{0}/{1}', steps.extract_branch.outputs.branch, 'storybook') }}
#
#      - name: Deploy App to GH Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GH_TOKEN }}
#          publish_branch: ${{ secrets.GH_PAGES_FULL_BRANCH }}
#          publish_dir: ./app-build-files
#          destination_dir: ${{ format('{0}/{1}', steps.extract_branch.outputs.branch, 'app') }}