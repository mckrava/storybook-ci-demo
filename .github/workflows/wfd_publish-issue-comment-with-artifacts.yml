# | IMPORTANT - any changes to workflow with trigger event "workflow_dispatch" requires to push changes to default
# | branch first (eg. "develop" branch) to take effect. This concerns all github-scripts which are used in such workflow.
# | More details - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch


# | Publish statuses as issue/PR comment with available run artifacts list.
# |
# | Fetching available artifacts can be done only in separate/next workflow run after workflow run
# | which generates these artifacts. Artifacts are not visible for API before run is completed. More details in
# | this issue - https://github.com/actions/upload-artifact/issues/50.
name: "Report in issue with artifacts (dispatch)"

on:
  workflow_dispatch:
    inputs:
      issue_comment_data:
        # | Data passed from caller workflow - "Reusable :: Report in issue" (.github/workflows/_called_report-status-in-issue.yml)
        # | {
        # |   publishArtifactsList: bool;
        # |   repoUrl: string;
        # |   runId: number;
        # |   commentBody: string;
        # |   owner: string;
        # |   repo: string;
        # |   suiteId: number;
        # |   existingIssueCommentId: number;
        # |   issueNumber: string;
        # | }
        description: 'Stringified JSON with prepared data for publication comment'
        required: false
        default: '{}'
        type: string

jobs:
  report-with-artifacts:
    name: "Report"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

#
#      - name: "Get Timestamp"
#          id: timestamp
#          uses: nanzm/get-time-action@v1.1
#          with:
#            format: 'YYYYMMDDHHmmssSSS'
#
#      - name: "Cache issue comment content"
#        uses: actions/cache@v2
#        id: cache-reporter-content
#        env:
#          TIMESTAMP: ${{ steps.timestamp.outputs.time }}
#        with:
#          path: ./reporter-artifacts
#          key: reporter-artifacts-branch-${{ github.ref_name }}-commit-${{ github.sha }}-${{ steps.timestamp.outputs.time }}
#          restore-keys: |
#            reporter-artifacts-branch-${{ github.ref_name }}-commit-${{ github.sha }}-
#
#      - name: "Check if comment data folder exists"
#        id: check-cache-existance
#        run: |
#          DIR="./reporter-artifacts"
#          if [ -d "$DIR" ]; then
#            echo "::set-output name=cached-comment-data-exists::true"
#          else
#            echo "::set-output name=cached-comment-data-exists::false"
#          fi
#
#      - name: "Parse issue comment data from cache"
#        id: parse-issue-comment-data
#        if: steps.check-cache-existance.outputs.cached-comment-data-exists == 'true'
#        run: |
#          issueCommentDataJson=$(cat ./reporter-artifacts/issue-comment-data.json)
#          issueCommentDataJson="${issueCommentDataJson//'%'/'%25'}"
#          issueCommentDataJson="${issueCommentDataJson//$'\n'/'%0A'}"
#          issueCommentDataJson="${issueCommentDataJson//$'\r'/'%0D'}"
#          echo "::set-output name=issueCommentDataJson::$issueCommentDataJson"
#
#      - run: mkdir -p reporter-artifacts
#        if: steps.check-cache-existance.outputs.cached-comment-data-exists != 'true'

      - uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ISSUE_COMMENT_DATA: ${{ github.event.inputs.issue_comment_data }}
        with:
          script: |
            const script = require('./scripts/ci/github-script-src/publish-issue-comment-with-artifacts.js')
            await script({github, context, core})
