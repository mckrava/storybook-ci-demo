{"version":3,"sources":["components/Chart/shared.tsx","generated/graphql.tsx","hooks/accounts/queries/useGetAccountsQuery.tsx","hooks/accounts/usePersistActiveAccount.tsx","hooks/accounts/resolvers/useSetActiveAccountMutationResolver.tsx","hooks/accounts/useSetActiveAccount.tsx","hooks/accounts/resolvers/useAccountsMutationResolvers.tsx","hooks/polkadotJs/typesConfig.tsx","hooks/config/usePersistentConfig.tsx","hooks/polkadotJs/usePolkadotJs.tsx","hooks/balances/useGetBalancesByAddress.tsx","hooks/balances/useBalanceQueryResolvers.tsx","hooks/vesting/useVestingScheduleQueryResolvers.tsx","hooks/vesting/useGetVestingScheduleByAddress.tsx","hooks/accounts/resolvers/useGetAccountsQueryResolver.tsx","hooks/accounts/useGetAccounts.tsx","hooks/lastBlock/useLastBlockQuery.tsx","hooks/lastBlock/useSubscribeNewBlockNumber.tsx","hooks/lastBlock/useRefetchWithNewBlock.tsx","hooks/config/useGetConfigQuery.tsx","hooks/accounts/queries/useGetActiveAccountQuery.tsx","hooks/vesting/useVestingMutationResolvers.tsx","hooks/balances/useBalanceMutationResolvers.tsx","hooks/polkadotJs/useExtensionQueryResolvers.tsx","hooks/config/useConfigQueryResolvers.tsx","hooks/config/useConfigMutationResolver.tsx","hooks/feePaymentAssets/useFeePaymentAssetsQueryResolvers.tsx","hooks/pools/useGetXykPools.tsx","hooks/pools/useGetLbpPools.tsx","hooks/pools/resolvers/useGetPoolsQueryResolver.tsx","hooks/pools/useGetXykPool.tsx","hooks/pools/useGetLbpPool.tsx","hooks/assets/useGetAssets.tsx","hooks/assets/resolvers/useGetAssetsQueryResolver.tsx","hooks/pools/useBuyXyk.tsx","hooks/pools/useSellXyk.tsx","hooks/pools/resolvers/useSubmitTradeMutationResolvers.tsx","hooks/apollo/useApollo.tsx","hooks/accounts/resolvers/useAccountsQueryResolvers.tsx","hooks/pools/resolvers/usePoolsQueryResolver.tsx","hooks/assets/resolvers/useAssetsQueryResolvers.tsx","hooks/pools/resolvers/usePoolsMutationResolvers.tsx","hooks/polkadotJs/useGetExtensionQuery.tsx","hooks/math/useMath.tsx","containers/MultiProvider.tsx","hooks/assets/queries/useGetAssetsQuery.tsx","hooks/pools/queries/useGetPoolByAssetsQuery.tsx","hooks/pools/mutations/useSubmitTradeMutation.tsx","hooks/pools/useSpotPrice.tsx","hooks/math/useFromPrecision.tsx","hooks/math/useToPrecision.tsx","hooks/math/usePercentageChange.tsx","hooks/pools/useSlippage.tsx","pages/TradePage.tsx","hooks/pools/useCalculateInGivenOut.tsx","hooks/pools/useCalculateOutGivenIn.tsx","hooks/pools/usePool.tsx","hooks/accounts/mutations/useSetActiveAccountMutation.tsx","pages/WalletPage.tsx","containers/Router.tsx","containers/AppBar.tsx","containers/PageContainer.tsx","hooks/misc/useLoading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChartGranularity","ChartType","PoolType","TradeType","GET_ACCOUNTS","defaultValue","id","undefined","usePersistedActiveAccount","createPersistedState","usePersistActiveAccount","useSetActiveAccountMutationResolver","setActiveAccount","setPersistedActiveAccount","useCallback","client","address","a","accountsData","cache","readQuery","query","accounts","map","account","isActive","activeAccount","find","forEach","modify","identify","__typename","fields","_","Promise","resolve","setTimeout","useSetActiveAccount","useResolverToRef","_obj","args","resolver","name","resolverRef","useRef","useEffect","current","log","debug","apply","arguments","defaultConfigValue","nodeUrl","process","processorUrl","appName","usePersistedConfig","usePersistentConfig","getPoolAccount","description","params","type","rpc","xyk","lbp","constate","useState","apiInstance","setApiInstance","loading","useMemo","provider","WsProvider","types","typesConfig","ormlTypes","typesAlias","ormlTypesAlias","ApiPromise","create","api","isReady","disconnect","PolkadotJsProvider","usePolkadotJsContext","nativeAssetId","useBalanceQueryResolvers","getBalancesByAddress","assetIds","balances","includes","system","nativeAssetBalance","push","assetId","balance","data","free","toString","filter","e","tokens","multi","codec","i","entries","storageKey","toHuman","assetBalances","assetBalance","createType","useGetBalancesByAddress","entity","assetAId","assetBId","useVestingScheduleQueryResolvers","getVestingScheduleByAddress","first","vesting","vestingSchedules","vestingSchedule","locks","lockedAmount","eq","lockedVestingAmount","remainingVestingAmount","amount","start","period","periodCount","perPeriod","useGetVestingScheduleByAddress","useGetAccountsQueryResolver","persistedActiveAccount","getAccounts","persistedActiveAccountId","web3Enable","web3Accounts","encodeAddress","decodeAddress","meta","isArray","GET_LAST_BLOCK","lastBlock","setLastBlock","subscribeNewBlocks","derive","chain","block","parachainSystem","validationData","validationDataOption","isSome","toJSON","parachainBlockNumber","header","number","relaychainBlockNumber","relayParentNumber","LastBlockProvider","useLastBlockContext","writeLastBlock","writeQuery","GET_CONFIG","GET_ACTIVE_ACCOUNT","useGetActiveAccountQuery","useApolloClient","result","useQuery","notifyOnNetworkStatusChange","refetchQueries","include","withGracefulErrors","fn","errorHandlers","reject","console","reduce","errorHandler","gracefulExtensionCancelationErrorHandler","message","error","vestingClaimHandler","status","events","dispatchError","isFinalized","info","event","method","section","phase","isInBlock","createdAtHash","isModule","registry","findMetaError","asModule","isBroadcast","hash","polkadotJsNotReadyYetError","useVestingMutationResolvers","claimVestedAmount","variables","Error","web3FromAddress","signer","tx","claim","signAndSend","transferBalanceHandler","transferBalanceExtrinsic","currencies","transfer","useBalanceMutationResolvers","transferBalance","from","to","currencyId","useConfigQueryResolvers","persistedConfig","config","_variables","multiTransactionPayment","accountCurrencyMap","feePaymentAsset","setCurrencyHandler","useConfigMutationResolvers","setPersistedConfig","setConfig","setCurrency","persistableConfig","useFeePaymentAssetsQueryResolvers","feePaymentAssets","acceptedCurrencies","acceptedCurrency","fallbackPrice","mapToPoolId","mapToPool","poolAssets","poolData","assets","getPoolIdsByAssetIds","lbpPoolId","xykPoolId","useGetPoolsQueryResolver","getLbpPools","useGetLbpPools","getXykPools","poolId","pool","useGetXykPools","getXykPool","useGetXykPool","getLbpPool","useGetLbpPool","poolIds","lbpPool","xykPool","all","lbpPools","xykPools","concat","mapToAsset","useGetAssetsQueryResolver","getAssets","assetRegistry","useGetAssets","asset","xykBuyHandler","applyTradeFee","tradeFee","tradeType","fee","BigNumber","multipliedBy","amountBN","amountWithFee","Buy","plus","minus","toFixed","useSubmitTradeMutationResolver","buyXyk","assetBuy","assetSell","amountBuy","maxSold","buy","useBuyXyk","sellXyk","amountSell","minBought","sell","useSellXyk","poolType","XYK","assetBAmount","amountWithSlippage","Sell","assetAAmount","useResolvers","Query","Account","AccountsQueryResolver","getPoolsQueryResolver","poolFieldsQueryResolvers","pools","XYKPool","LBPPool","usePoolsQueryResolver","PoolsQueryResolver","extension","extensions","isAvailable","length","Mutation","submitTrade","typeDefs","useConfigureApolloClient","resolvers","InMemoryCache","ApolloClient","uri","connectToDevTools","queryDeduplication","lastBlockData","updateCache","useRefetchWithNewBlock","GET_EXTENSION","useGetExtensionQuery","useLazyQuery","GetExtensionQueryProvider","instance","wasm","setWasm","math","MathProvider","useMathContext","ConfiguredApolloProvider","children","ApolloProvider","QueryProvider","MultiProvider","GET_ASSETS","GET_POOL_BY_ASSETS","SUBMIT_TRADE","getAssetBalance","useAssetBalance","useSpotPrice","assetABalance","assetBBalance","get_spot_price","precision12","pow","fromPrecision12","dividedBy","toPrecision12","percentageChange","b","aBN","calculateSlippage","spotPrice","spotPriceAmount","resultPercentageChange","isNaN","ROUNDING_MODE","ROUND_UP","percentualSlippage","abs","useSlippage","aToB","bToA","useAssets","onAssetIdsChange","watch","useTradeForm","useMutation","form","useForm","defaultValues","allowedSlippage","handleSubmit","LBP","useCalculatedAssetAmounts","assetBBalanceInput","inGivenOut","calculate_in_given_out","inGivenOutWithFee","useCalculateInGivenOut","getValues","calculatedAssetAAmount","calculatedAssetAAmountWithoutFee","assetABalanceInput","outGivenIn","calculate_out_given_in","outGivenInWithFee","useCalculateOutGivenIn","calculatedAssetBAmount","calculatedAssetBAmountWithoutFee","setValue","useApplyAllowedSlippage","slippage","slippageAmount","applyAllowedSlippage","TradeForm","setTradeType","onAssetAAmountInput","onAssetBAmountInput","useTradeType","register","assetsLoading","useDefaultFormAssets","liquidity","assetA","assetB","usePool","assetOptions","withoutAssetId","value","onSubmit","required","width","style","marginTop","marginBottom","onInput","TradePage","setAssetIds","newIds","isEqual","SET_ACTIVE_ACCOUNT","useSetActiveAccountMutation","unsetActiveAccount","padding","paddingLeft","onClick","WalletPage","accountsLoading","extensionData","extensionLoading","textAlign","Router","path","element","AppBar","activeAccountData","activeAccountLoading","PageContainer","useLoading","margin","setLevel","branch","baseName","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd7fe8d2.chunk.js","sourcesContent":["export enum ChartGranularity {\n    // ALL = 'ALL',\n    D30 = 'D30',\n    D7 = 'D7',\n    H24 = 'H24',\n    H1 = 'H1'\n}\n\nexport enum ChartType {\n    PRICE = 'PRICE',\n    VOLUME = 'VOLUME',\n    WEIGHTS = 'WEIGHTS'\n}\n\n\nexport interface Asset {\n    symbol: string | undefined,\n    fullName: string | undefined\n    icon?: string | undefined\n}\n\nexport interface AssetPair {\n    assetA: Asset,\n    assetB: Asset | undefined\n}\n\nexport enum PoolType {\n    LBP = 'LBP',\n    XYK = 'XYK'\n}\n\n// Display data is not in the {x,y} format, since it solely represents\n// an amount in a given asset\nexport interface DisplayData {\n    balance: number | undefined,\n    usdBalance: number | undefined,\n    asset: Asset\n}","import { gql } from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Account = {\n  __typename?: 'Account';\n  balances: Array<Balance>;\n  id: Scalars['String'];\n  isActive: Scalars['Boolean'];\n  name?: Maybe<Scalars['String']>;\n  vestingSchedule: VestingSchedule;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  id: Scalars['String'];\n};\n\nexport type Balance = {\n  __typename?: 'Balance';\n  assetId: Scalars['String'];\n  balance: Scalars['String'];\n};\n\nexport type Config = {\n  __typename?: 'Config';\n  appName: Scalars['String'];\n  feePaymentAsset?: Maybe<Scalars['String']>;\n  nodeUrl: Scalars['String'];\n  processorUrl: Scalars['String'];\n};\n\nexport type Extension = {\n  __typename?: 'Extension';\n  isAvailable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type FeePaymentAsset = {\n  __typename?: 'FeePaymentAsset';\n  assetId?: Maybe<Scalars['String']>;\n  fallbackPrice?: Maybe<Scalars['String']>;\n};\n\nexport type LbpPool = {\n  __typename?: 'LBPPool';\n  assetAId: Scalars['String'];\n  assetBId: Scalars['String'];\n  balances?: Maybe<Array<Balance>>;\n  id: Scalars['String'];\n};\n\nexport type LastBlock = {\n  __typename?: 'LastBlock';\n  id: Scalars['String'];\n  parachainBlockNumber?: Maybe<Scalars['String']>;\n  relaychainBlockNumber?: Maybe<Scalars['String']>;\n};\n\nexport type Pool = LbpPool | XykPool;\n\nexport type Query = {\n  __typename?: 'Query';\n  _empty?: Maybe<Scalars['String']>;\n  _tradeType?: Maybe<TradeType>;\n  account?: Maybe<Account>;\n  accounts: Array<Account>;\n  assets?: Maybe<Array<Asset>>;\n  config: Config;\n  extension: Extension;\n  feePaymentAssets?: Maybe<Array<FeePaymentAsset>>;\n  lastBlock?: Maybe<LastBlock>;\n  pools?: Maybe<Array<Pool>>;\n};\n\nexport enum TradeType {\n  Buy = 'Buy',\n  Sell = 'Sell'\n}\n\nexport type VestingSchedule = {\n  __typename?: 'VestingSchedule';\n  perPeriod?: Maybe<Scalars['String']>;\n  period?: Maybe<Scalars['String']>;\n  periodCount?: Maybe<Scalars['String']>;\n  remainingVestingAmount?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['String']>;\n};\n\nexport type XykPool = {\n  __typename?: 'XYKPool';\n  assetAId: Scalars['String'];\n  assetBId: Scalars['String'];\n  balances?: Maybe<Array<Balance>>;\n  id: Scalars['String'];\n};\n","import { useQuery } from '@apollo/client'\nimport { Query } from '../../../generated/graphql';\nimport { loader } from 'graphql.macro';\n\nexport const GET_ACCOUNTS = loader('./../graphql/GetAccounts.query.graphql');\nexport interface GetAccountsQueryResponse {\n    accounts: Query['accounts'],\n    lastBlock: Query['lastBlock']\n}\n\nexport const useGetAccountsQuery = () => useQuery<GetAccountsQueryResponse>(GET_ACCOUNTS, {\n    notifyOnNetworkStatusChange: true,\n});","import { useLocalStorage } from 'react-use';\nimport { Account } from '../../generated/graphql';\nimport createPersistedState from 'use-persisted-state';\n\nexport const key = 'basilisk-active-account';\nexport const defaultValue = {\n    id: undefined\n};\nexport interface PersistedAccount {\n    id: string | undefined\n}\n\n// we're not using react-use/useLocalStorage since i couldn't figure out\n// why it would not trigger effects when the local storage updates\nconst usePersistedActiveAccount = createPersistedState(key);\nexport const usePersistActiveAccount = () => usePersistedActiveAccount<PersistedAccount | undefined>(defaultValue);","import { ApolloCache, ApolloClient, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { useSetActiveAccount } from '../useSetActiveAccount'\nimport { SetActiveAccountMutationVariables } from '../mutations/useSetActiveAccountMutation';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\n\nexport const useSetActiveAccountMutationResolver = () => {\n    const setActiveAccount = useSetActiveAccount();\n    \n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: SetActiveAccountMutationVariables,\n            { client }: { client: ApolloClient<NormalizedCacheObject> }\n        ) => setActiveAccount(client, args.id), [setActiveAccount]),\n        'setActiveAccount'\n    )\n}","import { ApolloCache, ApolloClient, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { gql } from 'graphql.macro';\nimport { find } from 'lodash';\nimport { useCallback } from 'react';\nimport { GetAccountsQueryResponse, GET_ACCOUNTS } from './queries/useGetAccountsQuery';\nimport { usePersistActiveAccount } from './usePersistActiveAccount';\n\nexport const useSetActiveAccount = () => {\n    const [_persistedActiveAccount, setPersistedActiveAccount] = usePersistActiveAccount();\n\n    return useCallback(async (\n        client: ApolloClient<NormalizedCacheObject>,\n        address: string | undefined\n    ) => {\n        const accountsData = client.cache?.readQuery<GetAccountsQueryResponse>({\n            query: GET_ACCOUNTS,\n        });\n\n        if (!accountsData?.accounts) return;\n\n        const accounts = accountsData.accounts\n            .map(account => ({\n                ...account,\n                isActive: account.id === address ? true : false\n            }))\n        \n        const activeAccount = find(accounts, { isActive: true });\n        setPersistedActiveAccount({\n            id: activeAccount?.id\n        })\n        \n        // TODO: return the data to be mutated from the mutation instead\n        // client.cache?.writeQuery<GetAccountsQueryResponse>({\n        //     query: GET_ACCOUNTS,\n        //     data: { accounts, lastBlock: accountsData.lastBlock }\n        // });\n\n        accounts.forEach(account => {\n            client.cache.modify({\n                id: client.cache.identify({\n                    __typename: account.__typename,\n                    id: account.id\n                }),\n                fields: {\n                    isActive: _ => account.isActive\n                }\n            })\n        });\n\n        // wait for the local storage changes before finishing the mutation\n        // TODO: find a better way to wait until the local storage changes are\n        // propagated to the resolverRef\n        await (new Promise(resolve => setTimeout(resolve, 0)));\n\n        return accounts;\n    }, [ \n        setPersistedActiveAccount\n    ])\n}","import { ApolloCache, ApolloClient, NormalizedCacheObject, Resolver } from '@apollo/client'\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { SetActiveAccountMutationVariables } from '../mutations/useSetActiveAccountMutation'\nimport log from 'loglevel';\nimport { useSetActiveAccount } from '../useSetActiveAccount';\nimport { useSetActiveAccountMutationResolver } from './useSetActiveAccountMutationResolver';\n\n/**\n * Updates the resolver fn ref each time the given resolver fn changes.\n * \n * This is necessary to reflect changes made to functions within hooks\n * within the Apollo resolvers configuration. \n */\nexport const useResolverToRef = (resolver: Resolver, name?: string) => {\n    const resolverRef = useRef(resolver);\n    // when the resolver changes, update the ref\n    useEffect(() => { resolverRef.current = resolver }, [resolver]);\n\n    return function resolverFromRef() {\n        // TODO is there a better way to debug resolvers? Since the function name\n        // is not visible in the apollo error\n        log.debug('Running resolver', name);\n        // execute the wrapper resolver ref, with the given arguments from Apollo\n        return resolverRef.current.apply(undefined, arguments as any);\n    }\n}\n\n/**\n * Used to resolve mutations regarding the Account entity\n * @returns \n */\nexport const useAccountsMutationResolvers = () => {\n    const setActiveAccountMutationResolver = useSetActiveAccountMutationResolver();\n\n    return {\n        setActiveAccount: setActiveAccountMutationResolver\n    }\n}","export default {\n    \"alias\": {\n      \"tokens\": {\n        \"AccountData\": \"OrmlAccountData\"\n      }\n    },\n    \"types\": [\n      {\n        \"AssetPair\": {\n          \"asset_in\": \"AssetId\",\n          \"asset_out\": \"AssetId\"\n        },\n        \"Amount\": \"i128\",\n        \"AmountOf\": \"Amount\",\n        \"Address\": \"AccountId\",\n        \"OrmlAccountData\": {\n          \"free\": \"Balance\",\n          \"frozen\": \"Balance\",\n          \"reserved\": \"Balance\"\n        },\n        \"Fee\": {\n          \"numerator\": \"u32\",\n          \"denominator\": \"u32\"\n        },\n        \"BalanceInfo\": {\n          \"amount\": \"Balance\",\n          \"assetId\": \"AssetId\"\n        },\n        \"Chain\": {\n          \"genesisHash\": \"Vec<u8>\",\n          \"lastBlockHash\": \"Vec<u8>\"\n        },\n        \"Currency\": \"AssetId\",\n        \"CurrencyId\": \"AssetId\",\n        \"CurrencyIdOf\": \"AssetId\",\n        \"Intention\": {\n          \"who\": \"AccountId\",\n          \"asset_sell\": \"AssetId\",\n          \"asset_buy\": \"AssetId\",\n          \"amount\": \"Balance\",\n          \"discount\": \"bool\",\n          \"sell_or_buy\": \"IntentionType\"\n        },\n        \"IntentionId\": \"Hash\",\n        \"IntentionType\": {\n          \"_enum\": [\n            \"SELL\",\n            \"BUY\"\n          ]\n        },\n        \"LookupSource\": \"AccountId\",\n        \"Price\": \"Balance\",\n        \"ClassId\": \"u64\",\n        \"TokenId\": \"u64\",\n        \"ClassData\": {\n          \"is_pool\": \"bool\"\n        },\n        \"TokenData\": {\n          \"locked\": \"bool\"\n        },\n        \"ClassInfo\": {\n          \"metadata\": \"Vec<u8>\",\n          \"total_issuance\": \"TokenId\",\n          \"owner\": \"AccountId\",\n          \"data\": \"ClassData\"\n        },\n        \"TokenInfo\": {\n          \"metadata\": \"Vec<u8>\",\n          \"owner\": \"AccountId\",\n          \"data\": \"TokenData\"\n        },\n        \"ClassInfoOf\": \"ClassInfo\",\n        \"TokenInfoOf\": \"TokenInfo\",\n        \"ClassIdOf\": \"ClassId\",\n        \"TokenIdOf\": \"TokenId\",\n        \"OrderedSet\": \"Vec<AssetId>\",\n        \"VestingSchedule\": {\n          \"start\": \"BlockNumber\",\n          \"period\": \"BlockNumber\",\n          \"period_count\": \"u32\",\n          \"per_period\": \"Compact<Balance>\"\n        },\n        \"VestingScheduleOf\": \"VestingSchedule\",\n        \"LBPWeight\": \"u32\",\n        \"WeightCurveType\": {\n          \"_enum\": [\n            \"Linear\"\n          ]\n        },\n        \"PoolId\": \"AccountId\",\n        \"BalanceOf\": \"Balance\",\n        \"AssetType\": {\n          \"_enum\": {\n            \"Token\": \"Null\",\n            \"PoolShare\": \"(AssetId,AssetId)\"\n          }\n        },\n        \"Pool\": {\n          \"owner\": \"AccountId\",\n          \"start\": \"BlockNumber\",\n          \"end\": \"BlockNumber\",\n          \"assets\": \"AssetPair\",\n          \"initial_weight\": \"LBPWeight\",\n          \"final_weight\": \"LBPWeight\",\n          \"weight_curve\": \"WeightCurveType\",\n          \"fee\": \"Fee\",\n          \"fee_collector\": \"AccountId\"\n        },\n        \"AssetDetails\": {\n          \"name\": \"Vec<u8>\",\n          \"asset_type\": \"AssetType\",\n          \"existential_deposit\": \"Balance\",\n          \"locked\": \"bool\"\n        },\n        \"AssetDetailsT\": \"AssetDetails\",\n        \"AssetMetadata\": {\n          \"symbol\": \"Vec<u8>\",\n          \"decimals\": \"u8\"\n        },\n        \"AssetInstance\": \"AssetInstanceV1\",\n        \"MultiLocation\": \"MultiLocationV1\",\n        \"AssetNativeLocation\": \"MultiLocation\",\n        \"MultiAsset\": \"MultiAssetV1\",\n        \"Xcm\": \"XcmV1\",\n        \"XcmOrder\": \"XcmOrderV1\"\n      }\n    ]\n  };","import createPersistedState from 'use-persisted-state';\nimport { Config } from '../../generated/graphql';\n\nconst key = 'basilisk-config';\nexport const defaultConfigValue = {\n    nodeUrl: process.env.REACT_APP_NODE_URL!,\n    processorUrl: process.env.REACT_APP_PROCESSOR_URL!,\n    appName: process.env.REACT_APP_APP_NAME!\n};\n\n// TODO: write apollo integration for querying and mutating the config\nconst usePersistedConfig = createPersistedState(key)\nexport const usePersistentConfig = () => usePersistedConfig<Config>(defaultConfigValue);","import { ApiPromise, WsProvider, HttpProvider } from '@polkadot/api';\nimport { ProviderInterface } from '@polkadot/rpc-provider/types'\nimport { useMemo, useState, useEffect } from 'react';\nimport constate from 'constate';\nimport typesConfig from './typesConfig';\nimport { usePersistentConfig } from '../config/usePersistentConfig';\nimport { types as ormlTypes, typesAlias as ormlTypesAlias } from '@open-web3/orml-type-definitions'\n\nconst getPoolAccount = {\n  description: 'Get pool account id by asset IDs',\n  params: [\n    {\n      name: 'assetAId',\n      type: 'u32'\n    },\n    {\n      name: 'assetBId',\n      type: 'u32'\n    }\n  ],\n  type: 'AccountId'\n};\nconst rpc = {\n  xyk: {\n    getPoolAccount  \n  },\n  lbp: {\n    getPoolAccount\n  }\n}\n\n/**\n * Setup an instance of PolkadotJs, and watch\n * for config updates. In case the nodeUrl changes,\n * then re-create the PolkadotJs instance\n */\nexport const useConfigurePolkadotJs = () => {\n  const [{ nodeUrl }] = usePersistentConfig();\n  const [apiInstance, setApiInstance] = useState<ApiPromise | undefined>(undefined);\n  const loading = useMemo(() => apiInstance ? false : true, [apiInstance]);\n  const provider = useMemo(() => new WsProvider(nodeUrl), [nodeUrl]);\n\n  const types = useMemo(() => ({\n    ...typesConfig.types[0],\n    ...ormlTypes,\n  }), []);\n\n  const typesAlias = useMemo(() => ({\n    ...typesConfig.alias,\n    ...ormlTypesAlias\n  }), []);\n\n  // (re-)Create the PolkadotJS instance, when the provider updates.\n  useEffect(() => {\n    (async () => {\n      setApiInstance(undefined);\n      const api = await ApiPromise.create({\n        provider,\n        types,\n        typesAlias,\n        rpc\n      });\n      await api.isReady;\n      setApiInstance(api);\n    })();\n\n    // when the component using the usePolkadot hook unmounts, disconnect the websocket\n    return () => {\n      apiInstance?.disconnect();\n    };\n  }, [provider]);\n\n  return { apiInstance, loading };\n};\n\n// TODO: lift to context using constate\n// export const usePolkadotJs = () => useConfigurePolkadotJs();\nexport const [PolkadotJsProvider, usePolkadotJsContext] = constate(useConfigurePolkadotJs);","import { includes } from 'lodash';\nimport { useCallback } from 'react';\nimport { Balance } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\n\nexport const nativeAssetId = '0';\nexport const assetBalanceDataType = 'AccountData';\n\nexport const useGetBalancesByAddress = () => {\n    const { apiInstance, loading } = usePolkadotJsContext()\n\n    const getBalancesByAddress = useCallback(async (address?: string, assetIds?: string[]) => {\n        if (!apiInstance || !address) return;\n\n        const balances: Balance[] = [];\n        \n        // fetch the native balance, only if no assetIds were specified, or if it was explicitly requested\n        if (!assetIds || includes(assetIds, nativeAssetId)) {\n            const nativeAssetBalance = await apiInstance.query.system.account(address);    \n\n            balances.push({\n                assetId: nativeAssetId,\n                balance: nativeAssetBalance?.data.free.toString()\n            });\n        }\n\n        // we've already fetched the native balance above, ignore it down the line\n        assetIds = assetIds ? assetIds.filter(e => e !== nativeAssetId) : assetIds;\n\n        // TODO: write type definitions for `query.tokens`\n        const assetBalances = assetIds\n            // if there are specific assetIds to fetch, query only those\n            ? (await apiInstance.query.tokens.accounts.multi(\n                // query for [address, assetId]\n                assetIds\n                    ?.map((assetId) => [address, assetId])\n            ))\n                .map((codec, i) => ({\n                    // pair the assetId in the same order as asked for in the multi query above\n                    assetId: assetIds![i],\n                    balance: codec\n                }))\n            // if no assetIds were specified, fetch all balances\n            : (await apiInstance.query.tokens.accounts.entries(address))\n                .map(([storageKey, codec]) => ({\n                    assetId: (storageKey.toHuman() as string[])[1],\n                    balance: codec\n                }))\n\n        assetBalances?.forEach(assetBalance => {\n            // only extracting the free balance as of now\n            const balance = apiInstance?.createType(\n                assetBalanceDataType,\n                assetBalance.balance\n            ).free.toString();\n\n            balances.push({ assetId: assetBalance.assetId, balance });\n        });\n\n        // TODO: treat Balance as a top level entity for caching purposes\n        return balances;\n    }, [apiInstance, loading]);\n\n    return getBalancesByAddress;\n}","import { useCallback } from 'react'\nimport { Account, LbpPool, XykPool } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { useGetBalancesByAddress } from './useGetBalancesByAddress';\n\nexport const __typename = 'Balance';\nexport const useBalanceQueryResolvers = () => {\n    const getBalancesByAddress = useGetBalancesByAddress();\n    const balances = useResolverToRef(\n        useCallback(\n            /**\n             * TODO: figure out how to use @export to fetch balances only for certain assetIds\n             * then we don't have to pass in so many different entities as possible arugments here.\n             * \n             * This should also allow caching of balances if they are not fetched as a nested field,\n             * but rather a top level field per address.\n             */ \n            async (entity: Account | LbpPool | XykPool, args) => {\n                let assetIds;\n                \n                // TODO: how to extract the typename from the LbpPool[__typename] directly?\n                if (entity.__typename === 'LBPPool' || entity.__typename === 'XYKPool') {\n                    entity = (entity as LbpPool | XykPool);\n                    assetIds = [entity.assetAId, entity.assetBId];\n                }\n\n                return (await getBalancesByAddress(entity.id, assetIds))\n                    ?.map(balance => ({\n                        ...balance,\n                        __typename,\n                        id: `${entity.id}-${balance.assetId}`,\n                    }))\n            }, \n            [getBalancesByAddress]\n        ),\n        'balances'\n    );\n\n    return {\n        balances\n    }\n}","import { useCallback } from 'react'\nimport { Account } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { useGetVestingScheduleByAddress } from './useGetVestingScheduleByAddress';\n\nexport const useVestingScheduleQueryResolvers = () => {\n    const getVestingScheduleByAddress = useGetVestingScheduleByAddress();\n    const vestingSchedule = useResolverToRef(\n        useCallback(\n            async (account: Account) => await getVestingScheduleByAddress(account.id), \n            [getVestingScheduleByAddress]\n        ),\n        'vestingSchedule'\n    );\n\n    return {\n        vestingSchedule\n    }\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { Vec } from '@polkadot/types';\nimport { VestingScheduleOf } from '@open-web3/orml-types/interfaces'\nimport { find, first } from 'lodash';\n\nexport const vestingBalanceDataType = 'Vec<BalanceLock>';\nexport const vestingBalanceLockId = 'ormlvest';\n\nexport const vestingScheduleDataType = 'Vec<VestingScheduleOf>';\n\nexport const useGetVestingScheduleByAddress = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const getVestingScheduleByAddress = useCallback(async (address?: string) => {\n        if (!apiInstance || !address) return;\n\n        // TODO: instead of multiple .createType calls, use the following\n        // https://github.com/AcalaNetwork/acala.js/blob/9634e2291f1723a84980b3087c55573763c8e82e/packages/sdk-core/src/functions/getSubscribeOrAtQuery.ts#L4\n        const vestingSchedule = first(\n            apiInstance.createType(\n                vestingScheduleDataType,\n                await apiInstance.query.vesting.vestingSchedules(address)\n            ) as Vec<VestingScheduleOf>\n        );\n\n        const lockedVestingAmount = find(\n            apiInstance.createType(\n                vestingBalanceDataType,\n                await apiInstance.query.balances.locks(address)\n            ),\n            lockedAmount => (\n                lockedAmount.id.eq(vestingBalanceLockId)\n            )\n        );\n        \n        // TODO: are we sure this really conforms with the graphql VestingSchedule type\n        // in all conditions?\n        return {\n            // TODO: add a claimableAmount (https://gist.github.com/maht0rz/53466af0aefba004d5a4baad23f8ce26)\n            remainingVestingAmount: lockedVestingAmount?.amount.toString(),\n            start: vestingSchedule?.start.toString(),\n            period: vestingSchedule?.period.toString(),\n            periodCount: vestingSchedule?.periodCount.toString(),\n            perPeriod: vestingSchedule?.perPeriod.toString()\n        }\n\n    }, [apiInstance, loading]);\n\n    return getVestingScheduleByAddress;\n}","import { isArray } from 'lodash';\nimport { useCallback } from 'react';\nimport { useGetAccounts } from '../useGetAccounts';\nimport { usePersistActiveAccount } from '../usePersistActiveAccount';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\n\nexport interface AccountsQueryResolverArgs {\n    isActive?: boolean\n}\n\nexport const __typename = 'Account';\n\nexport const useGetAccountsQueryResolver = () => {\n    const [persistedActiveAccount] = usePersistActiveAccount();\n    const getAccounts = useGetAccounts();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: AccountsQueryResolverArgs \n        ) => {\n            const accounts = await getAccounts(\n                persistedActiveAccount?.id,\n                args?.isActive,\n            );\n\n            // if no results were found, return undefined/null\n            // this is useful when un-setting the active account\n            if (!accounts) {\n                return null;\n            };\n    \n            return isArray(accounts)\n                ? accounts.map(account => ({\n                    ...account,\n                    __typename\n                }))\n                : ({\n                    // just a single account\n                    ...accounts,\n                    __typename\n                })\n        }, [\n            persistedActiveAccount,\n            getAccounts\n        ]),\n        'accounts'\n    )\n}","import { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport { encodeAddress, decodeAddress } from '@polkadot/util-crypto';\nimport { find } from 'lodash';\nimport { useCallback } from 'react';\nimport { PersistedAccount } from './usePersistActiveAccount';\n\n// prefix for the ss58 address formatting of substrate addresses\nexport const basiliskAddressPrefix = 10041;\n\n/**\n * Used to fetch either all accounts, or accounts matching the given\n * set of parameters e.g. 'isActive'.\n */\nexport const useGetAccounts = () => useCallback(async (\n    persistedActiveAccountId: string | undefined,\n    isActive: boolean | undefined\n) => {\n    // TODO: use `config.appName`\n    // ensure we're connected to the polkadot.js extension\n    await web3Enable('basilisk-ui');\n\n    // get all the accounts from the polkadot.js extension\n    const accounts = (await web3Accounts())\n        // transform the returned accounts into the required entity format\n        .map(account => {\n            const address = encodeAddress(decodeAddress(account.address), basiliskAddressPrefix)\n            return {\n                id: address,\n                name: account.meta.name,\n                isActive: false,\n            };\n        })\n        // mark the active account based on the current persisted account\n        .map(account => ({\n            ...account,\n            isActive: persistedActiveAccountId == account.id,\n        }))\n\n    // if we're filtering for an active account, return just the single active account\n    if (isActive) {\n        const account = find(accounts, { isActive: isActive })\n        return account;\n    }   \n\n    // return all retrieved accounts\n    return accounts;\n}, []);","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { LastBlock, Query } from '../../generated/graphql';\n\n\nexport const GET_LAST_BLOCK = loader('./graphql/GetLastBlock.query.graphql');\nexport interface GetLastBlockQueryResponse {\n    lastBlock: Query['lastBlock']\n}\n\nexport const useLastBlockQuery = () => useQuery<GetLastBlockQueryResponse>(GET_LAST_BLOCK);","import constate from 'constate';\nimport { useCallback, useEffect, useState } from 'react';\nimport { LastBlock } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { Option } from '@polkadot/types'\nimport BN from 'bn.js';\nimport { Codec } from '@polkadot/types/types';\n\nexport const validationDataDataType = 'Option<PolkadotPrimitivesV1PersistedValidationData>';\nexport interface PolkadotPrimitivesV1PersistedValidationData {\n    relayParentNumber: number\n}\nexport type ValidationData = PolkadotPrimitivesV1PersistedValidationData\n\n// TODO: lift up using constate\nexport const useSubscribeNewBlock = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const [lastBlock, setLastBlock] = useState<Partial<LastBlock> | undefined>(undefined);\n\n    const subscribeNewBlocks = useCallback(() => {\n        if (!apiInstance) return;\n        // TODO: how to unsubscribe?\n        apiInstance.derive.chain\n            .subscribeNewBlocks(async (block) => {\n                const validationData = await apiInstance.query.parachainSystem.validationData();\n\n                const validationDataOption = apiInstance.createType(\n                    validationDataDataType,\n                    validationData\n                );\n                \n                // TODO: this will only update the block if the relay chain block number is known\n                if (validationDataOption.isSome) {\n                    const validationData = validationDataOption.toJSON() as unknown as PolkadotPrimitivesV1PersistedValidationData;\n                    setLastBlock({\n                        parachainBlockNumber: block.block.header.number.toString(),\n                        relaychainBlockNumber: validationData.relayParentNumber.toString()\n                    })\n                }                \n            })\n\n    }, [apiInstance]);\n\n    useEffect(() => {\n        if (loading) return;\n        subscribeNewBlocks();\n    }, [loading, subscribeNewBlocks])\n\n    return lastBlock;\n}\n\nexport const [LastBlockProvider, useLastBlockContext] = constate(useSubscribeNewBlock);","import { ApolloCache, ApolloClient, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { relativeTimeRounding } from 'moment';\nimport { useEffect } from 'react';\nimport { LastBlock } from '../../generated/graphql';\nimport { GetLastBlockQueryResponse, GET_LAST_BLOCK } from './useLastBlockQuery';\nimport { useLastBlockContext } from './useSubscribeNewBlockNumber'\n\nexport const __typename = 'LastBlock';\nexport const id = __typename;\n\nexport const writeLastBlock = (cache: ApolloCache<NormalizedCacheObject>, lastBlock: LastBlock) => {\n    return cache.writeQuery<GetLastBlockQueryResponse>({\n        query: GET_LAST_BLOCK,\n        data: {\n            lastBlock\n        }\n    })\n}\nexport const useRefetchWithNewBlock = (client: ApolloClient<NormalizedCacheObject>) => {\n    const lastBlock = useLastBlockContext();\n\n    useEffect(() => {\n        writeLastBlock(client.cache, {\n            __typename,\n            id,\n            ...lastBlock\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!lastBlock) return;\n\n        const lastBlockData = client.cache.readQuery<GetLastBlockQueryResponse>({\n            query: GET_LAST_BLOCK\n        });\n\n        if (!lastBlockData?.lastBlock?.parachainBlockNumber) {\n            // received the first real lastBlockNumber, don't refetch just yet\n            writeLastBlock(client.cache, {\n                __typename,\n                id,\n               ...lastBlock\n            })\n        } else {\n            // lastBlockNumber has been updated, and it's not the first time\n            // refetch queries that depend on the lastBlockNumber\n            client.refetchQueries({\n                updateCache(cache) {\n                    writeLastBlock(cache, {\n                        __typename,\n                        id,\n                        ...lastBlock\n                    })\n                }\n            })\n        }\n    }, [lastBlock]);\n}","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { Query } from '../../generated/graphql';\n\nexport const GET_CONFIG = loader('./graphql/GetConfig.query.graphql');\n\nexport interface GetConfigQueryResponse {\n    config: Query['config']\n}\n\nexport const useGetConfigQuery = () => useQuery<GetConfigQueryResponse>(GET_CONFIG, {\n    notifyOnNetworkStatusChange: true\n});","import { useApolloClient, useQuery } from '@apollo/client';\nimport constate from 'constate';\nimport { loader } from 'graphql.macro'\nimport { useEffect } from 'react';\nimport { Account, LastBlock, Query } from '../../../generated/graphql';\nimport { GET_CONFIG } from '../../config/useGetConfigQuery';\n\nexport const GET_ACTIVE_ACCOUNT = loader('./../graphql/GetActiveAccount.query.graphql');\n\nexport interface GetActiveAccountQueryResponse {\n    account: Query['account'],\n    lastBlock: Query['lastBlock'],\n}\n\n// TODO: turn this into a lazy query instead, so it does not get fetched right away\nexport const useGetActiveAccountQuery = () => {\n    const client = useApolloClient();\n    const result = useQuery<GetActiveAccountQueryResponse>(GET_ACTIVE_ACCOUNT, {\n        notifyOnNetworkStatusChange: true,\n    });\n\n    // when the active account updates, refetch the config\n    // since the config for `feePaymentAsset` depends on the active account\n    useEffect(() => {\n        client.refetchQueries({\n            include: [GET_CONFIG]\n        });\n    }, [result.data?.account?.id])\n\n    return result;\n}\nexport const [GetActiveAccountQueryProvider, useGetActiveAccountQueryContext] = constate(useGetActiveAccountQuery);","import { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { ClaimVestedAmountMutationVariables } from './useClaimVestedAmountMutation';\nimport { ExtrinsicStatus } from '@polkadot/types/interfaces/author';\nimport { DispatchError, EventRecord } from '@polkadot/types/interfaces/system';\nimport log from 'loglevel';\nimport { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { ApiPromise } from '@polkadot/api';\n\n/**\n * Run an async function and handle the thrown errors\n * with an array of error handlers, which may handle the errors gracefully\n * \n * @param fn \n * @param errorHandlers \n * @returns \n */\nexport type resolve = (result?: any) => void;\nexport type reject = (error?: any) => void;\nexport const withGracefulErrors = async (\n    fn: (resolve: resolve, reject: reject) => Promise<any>,\n    errorHandlers: ((error: any) => void)[]\n) => {\n    return new Promise<any>(async (resolve, reject) => {\n        try {\n            resolve(await fn(resolve, reject));\n        } catch (e: any) {\n            console.log('graceful error', e);\n            e = errorHandlers.reduce((e, errorHandler) => errorHandler(e), e);\n            // rejecting this promise with an error instead of throwing an error\n            // is necessary to reflect the apollo resolver loading state correctly\n            e ? reject(e) : resolve(null)\n        }\n    })\n}\n\nexport const cancelledErrorMessage = 'Cancelled';\n\n/**\n * This is an example graceful error handler,\n * if this would return `e` instead of `void`,\n * then the following graceful error handler would be triggered,\n * or by default the error would be thrown.\n * \n * @param e\n * @returns \n */\nexport const gracefulExtensionCancelationErrorHandler = (e: any) => {\n    if ((e as Error)?.message === cancelledErrorMessage) {\n        log.error('Operation presumably cancelled by the user in the Polkadot.js extension')\n        return;\n    }\n    return e;\n}\n\nexport const vestingClaimHandler = (resolve: resolve, reject: reject, apiInstance?: ApiPromise) => ({\n    status,\n    events = [],\n    dispatchError\n}: {\n    status: ExtrinsicStatus,\n    events: EventRecord[],\n    dispatchError?: DispatchError\n}) => {\n    if (status.isFinalized) log.info('operation finalized')\n\n    // TODO: extract intention registred for exchange buy/sell\n    events.forEach(({ event: { data, method, section }, phase }) => {\n        console.log('event handler', phase.toString(), `: ${section}.${method}`, data.toString());\n    });\n\n    // TODO: handle status via the action log / notification stack\n    if (status.isInBlock) {\n        console.log('is in block', status.createdAtHash?.toString());\n        if (dispatchError?.isModule) {\n            return log.info('operation unsuccessful',\n                !apiInstance\n                    ? dispatchError\n                    : apiInstance.registry.findMetaError(dispatchError.asModule)\n            );\n        }\n\n        return log.info('operation successful');\n    }\n\n    // if the operation has been broadcast, finish the mutation\n    if (status.isBroadcast) {\n        log.info('transaction has been broadcast', status.hash.toHuman());\n        return resolve();\n    }\n    if (dispatchError) {\n        log.error('There was a dispatch error', dispatchError);\n        return reject('Dispatch error');\n    }\n};\n\nexport const noAccountSelectedError = 'No Account selected';\nexport const polkadotJsNotReadyYetError = 'Polkadot.js is not ready yet';\n\nexport const useVestingMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const claimVestedAmount = useResolverToRef(\n        useCallback(async (\n            _obj,\n            variables: ClaimVestedAmountMutationVariables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            const address = variables?.address\n                ? variables.address\n                : cache.readQuery<GetActiveAccountQueryResponse>({\n                    query: GET_ACTIVE_ACCOUNT\n                })?.account?.id;\n\n            // TODO: error handling?\n            if (!address) throw new Error(noAccountSelectedError);\n            if (loading || !apiInstance) throw new Error(polkadotJsNotReadyYetError);\n\n            // // TODO: why does this not return a tx hash?\n            return await withGracefulErrors(async (resolve, reject) => {\n                const { signer } = await web3FromAddress(address);\n                await apiInstance.tx.vesting.claim()\n                    .signAndSend(\n                        address,\n                        { signer },\n                        vestingClaimHandler(resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ])\n\n        }, [loading, apiInstance]),\n        'claimVestedAmount'\n    )\n\n    return {\n        claimVestedAmount\n    }\n}","import { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, polkadotJsNotReadyYetError, reject, resolve, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\nimport { TransferBalanceMutationVariables } from './useTransferBalanceMutation';\nimport { ExtrinsicStatus } from '@polkadot/types/interfaces/author';\nimport { DispatchError } from '@polkadot/types/interfaces/system';\nimport log from 'loglevel';\nimport { ApiPromise } from '@polkadot/api';\nimport { RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';\n\n// TODO: use validate JSON schema module of some sort\nexport const invalidTransferVariablesError = 'Invalid transfer parameters provided';\n\nexport const transferBalanceHandler = (\n    apiInstance: ApiPromise,\n    resolve: resolve, \n    reject: reject\n) => ({\n    status,\n    dispatchError\n}: {\n    status: ExtrinsicStatus,\n    dispatchError?: DispatchError\n}) => {\n    if (status.isFinalized) log.info('operation finalized')\n\n    // TODO: handle status via the action log / notification stack\n    if (status.isInBlock) {\n        if (dispatchError?.isModule) {\n            return log.error('transfer unsuccessful', \n                apiInstance.registry.findMetaError(dispatchError.asModule)\n            );\n        }\n\n        return log.info('transfer successful');\n    }\n\n    // if the operation has been broadcast, finish the mutation\n    if (status.isBroadcast) {\n        log.info('transaction has been broadcast');\n        return resolve();\n    }\n    if (dispatchError) {\n        log.error('There was a dispatch error', \n            apiInstance.registry.findMetaError(dispatchError.asModule)\n        );\n        return reject();\n    }\n}\n\nexport const transferBalanceExtrinsic = (apiInstance: ApiPromise) => apiInstance.tx.currencies.transfer;\n\nexport const useEstimateTransferBalance = ({ from, to, currencyId, amount }: TransferBalanceMutationVariables) => {\n    const { apiInstance } = usePolkadotJsContext();\n    const [paymentInfo, setPaymentInfo] = useState<RuntimeDispatchInfo | undefined>(undefined);\n\n    const estimatePaymentInfo = useCallback(async () => {\n        if (!apiInstance || !from || !to || !currencyId || !amount) return setPaymentInfo(undefined);\n        \n        const paymentInfo = await transferBalanceExtrinsic(apiInstance)\n                .apply(apiInstance, [to, currencyId, amount])\n                .paymentInfo(from);\n        \n        setPaymentInfo(paymentInfo);\n\n    }, [apiInstance, from, to, currencyId, amount, setPaymentInfo]);\n\n    return { estimatePaymentInfo, paymentInfo };\n}\n\nexport const useBalanceMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const transferBalance = useResolverToRef(\n        useCallback(async (\n            _obj,\n            { from, to, currencyId, amount }: TransferBalanceMutationVariables\n        ) => {\n            if (!from || !to || !currencyId || !amount) throw new Error(invalidTransferVariablesError);\n            if (loading || !apiInstance) throw new Error(polkadotJsNotReadyYetError);\n\n            return withGracefulErrors(async (resolve, reject) => {\n                const { signer } = await web3FromAddress(from);\n                await transferBalanceExtrinsic(apiInstance).apply(apiInstance, [to, currencyId, amount])\n                    .signAndSend(\n                        from,\n                        { signer },\n                        transferBalanceHandler(apiInstance, resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ]);\n        }, [apiInstance, loading])\n    )\n\n    return {\n        transferBalance\n    }\n}","import { web3Enable } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\n\nexport const __typename = 'Extension';\nexport const id = __typename;\nexport const useExtensionQueryResolvers = () => {\n    /**\n     * TODO: handle the followingc cases gracefully:\n     * - pending authorization request exists\n     * - user rejects the connection in the extension\n     * - app tries to connect again, after the connection has been rejected\n     */\n    const extension = useResolverToRef(\n        useCallback(async () => {\n            const extensions = await web3Enable('basilisk-ui');\n            return {\n                __typename,\n                id,\n                isAvailable: !!extensions.length,\n            };\n        }, [])\n    )\n\n    return {\n        extension\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { usePersistentConfig } from './usePersistentConfig';\n\nexport const accountCurrencyMapDataType = 'Option<u32>';\n\nexport const __typename = 'Config';\nexport const id = __typename;\n\nexport const nativeAssetId = '0';\n\nexport const useConfigQueryResolvers = () => {\n    const [persistedConfig] = usePersistentConfig();\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const config = useResolverToRef(\n        useCallback(async (\n            _obj,\n            _variables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            if (!apiInstance || loading) return;\n\n            // TODO: evict config from the cache after active account changes\n            const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                query: GET_ACTIVE_ACCOUNT\n            })?.account?.id;\n\n            let feePaymentAsset =  address\n                ? apiInstance.createType(\n                    accountCurrencyMapDataType,\n                    await apiInstance.query.multiTransactionPayment.accountCurrencyMap(address)\n                )?.toHuman()\n                : null\n\n            feePaymentAsset = feePaymentAsset ? feePaymentAsset : nativeAssetId\n            \n            return {\n                __typename,\n                id,\n                ...persistedConfig,\n                feePaymentAsset\n            };\n        }, [apiInstance, loading])\n    );\n\n    return {\n        config\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\nimport { defaultConfigValue, usePersistentConfig } from './usePersistentConfig';\nimport { SetConfigMutationVariables } from './useSetConfigMutation';\n\nexport const defaultAssetId = '0';\n\nexport const setCurrencyHandler = (resolve: resolve, reject: reject) => {\n    return vestingClaimHandler(resolve, reject);\n}\n\nexport const useConfigMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const [_persistedConfig, setPersistedConfig] = usePersistentConfig();\n\n    const setConfig = useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: SetConfigMutationVariables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            // TODO: error handling?\n            if (!apiInstance || loading) return;\n\n            // TODO: return an optimistic update to the cache with the new config\n            await withGracefulErrors(async (resolve, reject) => {\n                const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                    query: GET_ACTIVE_ACCOUNT\n                })?.account?.id;\n\n                if (!address) return resolve();\n\n                const { signer } = await web3FromAddress(address);\n                \n                await apiInstance.tx.multiTransactionPayment.setCurrency(\n                    args.config?.feePaymentAsset || defaultAssetId\n                )\n                    .signAndSend(\n                        address,\n                        { signer },\n                        setCurrencyHandler(resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ]);\n            \n            const persistableConfig = args.config;\n            // there's no point in persisting the feePaymentAsset since it will\n            // be refetched from the node anyways\n            delete persistableConfig?.feePaymentAsset;\n            \n            setPersistedConfig(() => persistableConfig || defaultConfigValue);\n        }, [apiInstance, loading])\n    );\n\n    return {\n        setConfig\n    }\n}","import { useCallback } from 'react'\nimport { FeePaymentAsset } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\n\nexport const __typename: FeePaymentAsset['__typename'] = 'FeePaymentAsset';\nexport const useFeePaymentAssetsQueryResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const feePaymentAssets = useResolverToRef(\n        useCallback(async () => {\n            if (!apiInstance || loading) return;\n\n            const acceptedCurrencies = await apiInstance.query.multiTransactionPayment.acceptedCurrencies.entries()\n            const feePaymentAssets: FeePaymentAsset[] = acceptedCurrencies.map((acceptedCurrency) => {\n                const assetId = (acceptedCurrency[0].toHuman() as string[])[0];\n                return {\n                    // TODO: is there a safer type way to do this?\n                    // TODO: maybe? combine this with known asset data\n                    __typename,\n                    id: assetId,\n                    assetId: assetId,\n                    fallbackPrice: acceptedCurrency[1].toString()\n                }\n            })\n            \n            return feePaymentAssets;\n        }, [apiInstance, loading])\n    );\n\n    return {\n        feePaymentAssets\n    }\n}","import { useCallback } from 'react';\nimport { XykPool } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport type { StorageKey } from '@polkadot/types';\nimport type { AnyTuple, Codec } from '@polkadot/types/types';\nimport { ApiPromise } from '@polkadot/api';\n\nexport type PoolAssets = string[];\nexport const poolAssetsDataType = '(u32, u32)';\n\nexport const mapToPoolId = ([storageKey, codec]: [StorageKey<AnyTuple>, Codec]): [string, Codec] => {\n    const id = (storageKey.toHuman() as string[])[0];\n    return [id, codec];\n}\n\nexport const mapToPool = (apiInstance: ApiPromise) => ([id, codec]: [string, Codec]) => {\n    const poolAssets = codec.toHuman() as PoolAssets;\n\n    if (!poolAssets) return;\n\n    return {\n        id,\n        assetAId: poolAssets[0],\n        assetBId: poolAssets[1],\n    } as XykPool\n}\n\nexport const useGetXykPools = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string, assetIds?: string[]) => {\n        if (!apiInstance || loading) return [];\n\n        if (poolId) {\n            return [(await apiInstance.query.xyk.poolAssets(poolId))]\n                .map(pool => [poolId, pool] as [string, Codec])\n                .map(mapToPool(apiInstance))\n        }\n    \n        return (await apiInstance.query.xyk.poolAssets.entries())\n            .map(mapToPoolId)  \n            .map(mapToPool(apiInstance)) || []\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import { AccountId, AssetId } from '@open-web3/orml-types/interfaces';\nimport { ApiPromise } from '@polkadot/api';\nimport { useCallback } from 'react';\nimport { LbpPool } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport type { Codec } from '@polkadot/types/types';\nimport { mapToPoolId } from './useGetXykPools';\n\nexport type AssetPair = string[];\nexport interface PoolData {\n    assets: AssetPair\n}\n\nexport const mapToPool = (apiInstance: ApiPromise) => ([id, codec]: [string, Codec]) => {\n    const poolData = codec.toHuman() as unknown as PoolData;\n    \n    if (!poolData) return;\n\n    return {\n        id,\n        assetAId: poolData.assets[0],\n        assetBId: poolData.assets[1],\n    } as LbpPool\n}\n\nexport const useGetLbpPools = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async () => {\n        if (!apiInstance || loading) return [];\n        \n        return (await apiInstance.query.lbp.poolData.entries())\n            .map(mapToPoolId) \n            .map(mapToPool(apiInstance)) || [];\n    }, [\n        apiInstance,\n        loading,\n    ])\n}","import { ApiPromise } from '@polkadot/api';\nimport { Codec } from '@polkadot/types/types';\nimport { isArray, isObject } from 'lodash';\nimport { useCallback } from 'react';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { LbpPool, XykPool } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers';\nimport { __typename } from '../../accounts/resolvers/useGetAccountsQueryResolver';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { useGetLbpPool } from '../useGetLbpPool';\nimport { useGetLbpPools } from '../useGetLbpPools';\nimport { useGetXykPool } from '../useGetXykPool';\nimport { useGetXykPools } from '../useGetXykPools';\n\nexport interface PoolQueryResolverArgs {\n    poolId?: string,\n    assetIds?: string[],\n    poolType?: PoolType\n}\n// Filter those out, until the following issue is implemented\n// https://github.com/galacticcouncil/Basilisk-node/issues/248\nexport const defaultLbpPoolId = 'bXnAY36Vvd3HdWTX5v1Cgej2tYFsq1UpzShWyAQAr5HQ9FaJx';\nexport const defaultXykPoolId = 'bXnAY36Vvd3HdWTX5v1Cgej2tYFsq1UpzShWyAQAr5HQ9FaJx';\n\nexport interface PoolIds {\n    lbpPoolId?: string,\n    xykPoolId?: string\n}\n\nexport const getPoolIdsByAssetIds = async (apiInstance: ApiPromise, assetIds: string[]) => {\n    let lbpPoolId: string | undefined = (await (apiInstance.rpc as any).lbp.getPoolAccount(\n        assetIds[0], assetIds[1]\n    )).toHuman();\n    \n    let xykPoolId: string | undefined = (await (apiInstance.rpc as any).xyk.getPoolAccount(\n        assetIds[0], assetIds[1]\n    )).toHuman();\n\n    return {\n        lbpPoolId,\n        xykPoolId\n    }\n}\n\nexport const useGetPoolsQueryResolver = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const getLbpPools = useGetLbpPools();\n    const getXykPools = useGetXykPools();\n    const getXykPool = useGetXykPool();\n    const getLbpPool = useGetLbpPool();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args?: PoolQueryResolverArgs,\n        ) => {\n            if (!apiInstance || loading) return;\n\n            // use the provided poolId\n            let poolId = args?.poolId;\n            let poolIds: PoolIds = {\n                lbpPoolId: poolId,\n                xykPoolId: poolId\n            };\n\n            // if we're querying by assetIds, find the poolIds via RPC\n            if (args?.assetIds) {\n                poolIds = await getPoolIdsByAssetIds(apiInstance, args.assetIds);\n            }\n\n            // if the poolId is specified, try resolving with a single pool\n            if (poolIds.xykPoolId || poolIds.lbpPoolId) {\n                console.log('fetching pools');\n                let lbpPool = await getLbpPool(poolIds.lbpPoolId);\n                let xykPool = await getXykPool(poolIds.xykPoolId);\n                \n                console.log('pools', lbpPool);\n\n                // if the assets are matching, its a default value which means the pool was not found\n                if (xykPool?.assetAId === xykPool?.assetBId) xykPool = undefined;\n                if (lbpPool?.assetAId === lbpPool?.assetBId) lbpPool = undefined;\n\n                // TODO: which pool should have priority if both types exist for the same assets?\n                const pool = xykPool || lbpPool;\n        \n                return pool && ({\n                    ...pool,\n                    __typename: xykPool \n                        ? 'XYKPool' as XykPool['__typename']\n                        : lbpPool\n                            ? 'LBPPool' as LbpPool['__typename']\n                            : undefined\n                })\n            }\n\n            // if no extra args were provided, get all the pools\n            const [lbpPools, xykPools] = await Promise.all([\n                getLbpPools(),\n                getXykPools()\n            ]);\n            \n            return ([] as (LbpPool | XykPool)[])\n                .concat(\n                    lbpPools\n                        ?.map(pool => ({\n                            ...pool,\n                            __typename: 'LBPPool'\n                        }) as LbpPool)\n                )\n                .concat(\n                    xykPools\n                        ?.map(pool => ({\n                            ...pool,\n                            __typename: 'XYKPool'\n                        }) as XykPool)\n                )\n\n        }, [getLbpPools]),\n        'pools'\n    )\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { mapToPool } from './useGetXykPools';\n\nexport const useGetXykPool = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string) => {\n        if (!apiInstance || loading || !poolId) return;\n\n        return mapToPool(apiInstance)([\n            poolId,\n            await apiInstance.query.xyk.poolAssets(poolId)\n        ]);\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { mapToPool } from './useGetLbpPools';\n\nexport const useGetLbpPool = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string) => {\n        if (!apiInstance || loading || !poolId) return;\n\n        return mapToPool(apiInstance)([\n            poolId,\n            await apiInstance.query.lbp.poolData(poolId)\n        ])\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport type { Codec } from '@polkadot/types/types';\nimport { ApiPromise } from '@polkadot/api';\nimport { Asset } from '../../generated/graphql';\n\nexport const assetDataType = 'Option<u32>';\n\n// TODO: parse the symbol from the storage key, or use a static client-side symbol map\nexport const mapToAsset = (apiInstance: ApiPromise) => ([_storageKey, codec]: [unknown, Codec]) => {\n    return {\n        id: (apiInstance.createType(\n                assetDataType,\n                codec\n            ).toHuman() as string)\n    } as Asset;\n        \n}\n\nexport const useGetAssets = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async () => {\n        if (!apiInstance || loading) return;\n\n        // TODO: do we wanna order these by id?\n        return (await apiInstance?.query.assetRegistry.assetIds.entries())\n            .map(mapToAsset(apiInstance)) || [];\n    }, [\n        apiInstance,\n        loading\n    ]);\n}","import { useCallback } from 'react';\nimport { Asset } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { useGetAssets } from '../useGetAssets';\n\nexport const __typename: Asset['__typename'] = 'Asset';\n\nexport const useGetAssetsQueryResolver = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const getAssets = useGetAssets();\n\n    return useResolverToRef(\n        useCallback(async () => {\n            return (await getAssets())\n                ?.map(asset => ({\n                    ...asset,\n                    __typename\n                }))\n        }, [\n            apiInstance,\n            loading\n        ])\n    )\n}","import { ApolloCache, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { withGracefulErrors, gracefulExtensionCancelationErrorHandler, vestingClaimHandler, resolve, reject } from '../vesting/useVestingMutationResolvers';\n\nexport const xykBuyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const useBuyXyk = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const discount = false;\n\n    return useCallback(async (\n        cache: ApolloCache<NormalizedCacheObject>,\n        assetBuy: string, // 1\n        assetSell: string, // 49.7 + 0.2% = 49.9\n        amountBuy: string, // 99\n        maxSold: string, // 49.5 + 0.5%\n    ) => {\n        if (!apiInstance || loading) return;\n\n        await withGracefulErrors(async (resolve, reject) => {\n            const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                query: GET_ACTIVE_ACCOUNT\n            })?.account?.id;\n\n            // TODO: extract this error\n            if (!address) return reject(new Error('No active account found!'));\n\n            const { signer } = await web3FromAddress(address);\n\n            await apiInstance.tx.xyk.buy(\n                assetBuy,\n                assetSell,\n                amountBuy,\n                maxSold,\n                discount\n            )\n                .signAndSend(\n                    address,\n                    { signer },\n                    xykBuyHandler(resolve, reject, apiInstance)\n                )\n        }, [\n            gracefulExtensionCancelationErrorHandler\n        ])\n    }, [apiInstance, loading]);\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\n\nexport const xykBuyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const useSellXyk = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const discount = false;\n\n    return useCallback(async (\n        cache: ApolloCache<NormalizedCacheObject>,\n        assetSell: string,\n        assetBuy: string,\n        amountSell: string,\n        minBought: string,\n    ) => {\n        if (!apiInstance || loading) return;\n\n        await withGracefulErrors(async (resolve, reject) => {\n            const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                query: GET_ACTIVE_ACCOUNT\n            })?.account?.id;\n\n            if (!address) return reject(new Error('No active account found!'));\n\n            const { signer } = await web3FromAddress(address);\n\n            await apiInstance.tx.xyk.sell(\n                assetSell,\n                assetBuy,\n                amountSell,\n                minBought,\n                discount\n            )\n                .signAndSend(\n                    address,\n                    { signer },\n                    xykBuyHandler(resolve, reject, apiInstance)\n                )\n        }, [\n            gracefulExtensionCancelationErrorHandler\n        ]);\n    }, [apiInstance, loading])\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport BigNumber from 'bignumber.js';\nimport { gql } from 'graphql.macro';\nimport { useCallback } from 'react'\nimport { PoolType } from '../../../components/Chart/shared';\nimport { Maybe, TradeType } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers'\nimport { SubmitTradeMutationVariables } from '../mutations/useSubmitTradeMutation';\nimport { useBuyXyk } from '../useBuyXyk'\nimport { useSellXyk } from '../useSellXyk';\n\n// this is for buy, for sell we need to use minus, not plus\nexport const applyAllowedSlippage = (\n    amount: string, \n    allowedSlippage: string,\n    tradeType: TradeType\n) => {\n    let slippageAmount = new BigNumber(amount)\n        .multipliedBy(\n            new BigNumber(allowedSlippage)\n                .dividedBy(100)\n        )\n\n    const amountBN = new BigNumber(amount);\n    \n    const amountWithSlippage = tradeType === TradeType.Buy\n            // if you're buying an exact amount,\n            // you must be willing to pay more\n            ? amountBN.plus(slippageAmount)\n            // if you're selling an exact amount,\n            // you should be willing to receive less\n            : amountBN.minus(slippageAmount)\n    \n    return amountWithSlippage.toFixed(0);\n}\n\nexport const applyTradeFee = (\n    amount: string,\n    // TODO: get this from constants\n    tradeFee: string = '0.002', // 0.2% default\n    tradeType: TradeType\n) => {\n    let fee = new BigNumber(amount)\n        .multipliedBy(\n            new BigNumber(tradeFee)\n        )\n\n    const amountBN = new BigNumber(amount);\n    \n    const amountWithFee = tradeType === TradeType.Buy\n            ? amountBN.plus(fee)\n            : amountBN.minus(fee);\n            \n    return amountWithFee.toFixed(0);\n}\n\nexport const useSubmitTradeMutationResolver = () => {\n    const buyXyk = useBuyXyk();\n    const sellXyk = useSellXyk();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: Maybe<SubmitTradeMutationVariables>,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            if (!args) return\n            if (args?.poolType === PoolType.XYK && args?.tradeType === TradeType.Buy) {\n                return await buyXyk(\n                    cache,\n                    args.assetBId,\n                    args.assetAId,\n                    args.assetBAmount,\n                    args.amountWithSlippage,\n                );\n            }\n\n            if (args?.poolType === PoolType.XYK && args?.tradeType === TradeType.Sell) {\n                return await sellXyk(\n                    cache,\n                    args.assetAId,\n                    args.assetBId,\n                    args.assetAAmount,\n                    args.amountWithSlippage,\n                );\n            }\n\n            throw new Error('We dont support this trade type yet');\n        }, [buyXyk])\n    )\n}","import { useMemo } from 'react';\nimport { ApolloClient, createHttpLink, from, InMemoryCache, Resolvers,  } from '@apollo/client';\nimport { useAccountsQueryResolvers } from '../accounts/resolvers/useAccountsQueryResolvers';\nimport { loader } from 'graphql.macro';\nimport { useAccountsMutationResolvers } from '../accounts/resolvers/useAccountsMutationResolvers';\nimport { useRefetchWithNewBlock } from '../lastBlock/useRefetchWithNewBlock';\nimport { usePersistentConfig } from '../config/usePersistentConfig';\nimport { useVestingMutationResolvers } from '../vesting/useVestingMutationResolvers';\n\nimport { useBalanceMutationResolvers } from '../balances/useBalanceMutationResolvers';\nimport { useExtensionQueryResolvers } from '../polkadotJs/useExtensionQueryResolvers';\nimport { useConfigQueryResolvers } from '../config/useConfigQueryResolvers';\nimport { useConfigMutationResolvers } from '../config/useConfigMutationResolver';\nimport { useFeePaymentAssetsQueryResolvers } from '../feePaymentAssets/useFeePaymentAssetsQueryResolvers';\nimport { usePoolsQueryResolver } from '../pools/resolvers/usePoolsQueryResolver';\nimport { useBalanceQueryResolvers } from '../balances/useBalanceQueryResolvers';\nimport { useAssetsQueryResolvers } from '../assets/resolvers/useAssetsQueryResolvers';\nimport { usePoolsMutationResolvers } from '../pools/resolvers/usePoolsMutationResolvers';\n\n/**\n * Add all local gql resolvers here\n * @returns Resolvers\n */\nexport const useResolvers: () => Resolvers = () => {\n    const { Query: AccountsQueryResolver, Account } = useAccountsQueryResolvers();\n    const { Query: PoolsQueryResolver, XYKPool, LBPPool } = usePoolsQueryResolver()\n    return {\n        Query: {\n            ...AccountsQueryResolver,\n            ...useExtensionQueryResolvers(),\n            ...useConfigQueryResolvers(),\n            ...useFeePaymentAssetsQueryResolvers(),\n            ...useBalanceQueryResolvers(),\n            ...PoolsQueryResolver,\n            ...useAssetsQueryResolvers(),\n        },\n        Mutation: {\n            ...useAccountsMutationResolvers(),\n            ...useVestingMutationResolvers(),\n            ...useBalanceMutationResolvers(),\n            ...useConfigMutationResolvers(),\n            ...usePoolsMutationResolvers()\n        },\n        Account,\n        XYKPool,\n        LBPPool\n    }\n};\n\nexport const typeDefs = loader('./../../schema.graphql');\n\n/**\n * Recreates the apollo client instance each time the config changes\n * @returns \n */\nexport const useConfigureApolloClient = () => {\n    const resolvers = useResolvers();\n    const cache =  new InMemoryCache();\n    // can't get the config from a query before we setup apollo\n    // therefore we get it from the local storage instead\n    const [{ processorUrl }] = usePersistentConfig();\n\n    const client = useMemo(() => {\n        return new ApolloClient({\n            uri: processorUrl,\n            cache,\n            // TODO: don't connect in production\n            connectToDevTools: true,\n            queryDeduplication: true,\n            resolvers,\n            typeDefs,\n        })\n    }, [processorUrl]);\n    \n    useRefetchWithNewBlock(client);\n    \n    return client;\n};\n\nexport const useApollo = () => useConfigureApolloClient();","import { Resolver } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { useBalanceQueryResolvers } from '../../balances/useBalanceQueryResolvers';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\nimport { useVestingScheduleQueryResolvers } from '../../vesting/useVestingScheduleQueryResolvers';\nimport { useGetAccountsQueryResolver } from './useGetAccountsQueryResolver';\n\n/**\n * Used to resolve queries for the `Account` (or `accounts`) entity.\n */\nexport const useAccountsQueryResolvers = () => {    \n    const getAccountsQueryResolver = useGetAccountsQueryResolver();\n\n    return {\n        Query: {\n            accounts: getAccountsQueryResolver\n        },\n        /**\n         * Additional sub-resolvers for the `Account` entity,\n         * resolving e.g. the `balances` or `vestingSchedules` fields.\n         */\n        Account: {\n            ...useBalanceQueryResolvers(),\n            ...useVestingScheduleQueryResolvers()\n        }\n    }\n}","import { useBalanceQueryResolvers } from '../../balances/useBalanceQueryResolvers'\nimport { useGetPoolsQueryResolver } from './useGetPoolsQueryResolver'\n\nexport const usePoolsQueryResolver = () => {\n    const getPoolsQueryResolver = useGetPoolsQueryResolver()\n    const poolFieldsQueryResolvers = {\n        ...useBalanceQueryResolvers()\n    }\n\n    return {\n        Query: {\n            pools: getPoolsQueryResolver,\n        },\n        XYKPool: poolFieldsQueryResolvers,\n        LBPPool: poolFieldsQueryResolvers\n    }\n}","import { useGetAssetsQueryResolver } from './useGetAssetsQueryResolver'\n\nexport const useAssetsQueryResolvers = () => {\n    const getAssetsQueryResolver = useGetAssetsQueryResolver();\n\n    return {\n        assets: getAssetsQueryResolver\n        // TODO: add stuff like a total circulating supply or other data we might need\n        // Asset:\n    }\n}","import { useSubmitTradeMutationResolver } from './useSubmitTradeMutationResolvers'\n\nexport const usePoolsMutationResolvers = () => {\n    const submitTrade = useSubmitTradeMutationResolver();\n    \n    return {\n        submitTrade\n    }\n}","import { useLazyQuery, useQuery } from '@apollo/client';\nimport constate from 'constate';\nimport { loader } from 'graphql.macro';\nimport { Query } from '../../generated/graphql';\n\nexport const GET_EXTENSION = loader('./graphql/GetExtension.query.graphql');\n\nexport interface GetExtensionQueryResponse {\n    extension: Query['extension']\n}\n\nexport const useGetExtensionQuery = () => useQuery<GetExtensionQueryResponse>(GET_EXTENSION, {\n    notifyOnNetworkStatusChange: true,\n});\n\nexport const useGetExtensionLazyQuery = () => useLazyQuery<GetExtensionQueryResponse>(GET_EXTENSION, {\n    notifyOnNetworkStatusChange: true\n})\n\nexport const [GetExtensionQueryProvider, useContextualGetExtensionLazyQuery] = constate(useGetExtensionLazyQuery);","import constate from 'constate';\nimport { useEffect, useState } from 'react'\n\n// TODO: figure out how to extract types from the wasm type definitions\nexport interface HydraDxMath {\n    get_spot_price: (a: string, b: string, c: string) => string | undefined,\n    calculate_in_given_out: (a: string, b: string, c: string) => string | undefined,\n    calculate_out_given_in: (a: string, b: string, c: string) => string | undefined\n}\n\n/**\n * Load the wasm math module\n * @returns \n */\nexport const useMath = () => {\n    const [wasm, setWasm] = useState<{\n        instance: HydraDxMath | undefined,\n        loading: boolean\n    } | undefined>({\n        instance: undefined,\n        loading: true,\n    });\n\n    useEffect(() => {\n        (async () => {\n            setWasm({\n                // TODO: if the module path is a variable, the module can't be found for some reason\n                instance: await import('hydra-dx-wasm/build/xyk/bundler') as HydraDxMath,\n                loading: false,\n            });\n        })();\n    }, [setWasm])\n\n    // TODO if we need additional math functions outside of wasm,\n    // inject them here\n    return { math: wasm?.instance, loading: wasm?.loading };\n}\n\nexport const [MathProvider, useMathContext] = constate(useMath);","import { ApolloProvider, useApolloClient } from '@apollo/client';\nimport React from 'react';\nimport { GetActiveAccountQueryProvider } from '../hooks/accounts/queries/useGetActiveAccountQuery';\nimport { useConfigureApolloClient } from '../hooks/apollo/useApollo';\nimport { LastBlockProvider } from '../hooks/lastBlock/useSubscribeNewBlockNumber';\nimport { GetExtensionQueryProvider } from '../hooks/polkadotJs/useGetExtensionQuery';\nimport { PolkadotJsProvider } from '../hooks/polkadotJs/usePolkadotJs';\nimport { MathProvider } from '../hooks/math/useMath';\n\nexport const ConfiguredApolloProvider = ({ children }: { children: React.ReactNode }) => {\n    const client = useConfigureApolloClient();\n    return (\n        <ApolloProvider client={client}>\n            {children}\n        </ApolloProvider>\n    )\n}\n\nexport const QueryProvider = ({ children }: { children: React.ReactNode }) => (\n    <GetExtensionQueryProvider>\n        {children}\n    </GetExtensionQueryProvider>\n)\n\n// TODO: use react-multi-provider instead of ugly nesting\nexport const MultiProvider = ({ children }: { children: React.ReactNode }) => {\n    return (\n        <PolkadotJsProvider>\n            <LastBlockProvider>\n                <ConfiguredApolloProvider>\n                    <QueryProvider>\n                        <MathProvider>\n                            {children}\n                        </MathProvider>\n                    </QueryProvider>\n                </ConfiguredApolloProvider>\n            </LastBlockProvider>\n        </PolkadotJsProvider>\n\n    )\n}","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro'\nimport { Asset } from '../../../generated/graphql';\n\nexport const GET_ASSETS = loader('../graphql/GetAssets.query.graphql');\n\nexport interface GetAssetsQueryResponse {\n    assets: Asset[]\n}\n\nexport const useGetAssetsQuery = () => useQuery<GetAssetsQueryResponse>(GET_ASSETS, {\n    notifyOnNetworkStatusChange: true\n})","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { Pool } from '../../../generated/graphql';\nimport { GetPoolsQueryResponse } from './useGetPoolsQuery';\n\nexport const GET_POOL_BY_ASSETS = loader('./../graphql/GetPoolByAssets.query.graphql');\n\nexport interface GetPoolByAssetsQueryVariables {\n    assetAId?: string,\n    assetBId?: string,\n}\nexport interface GetPoolQueryResponse {\n    pool: Pool\n}\n\nexport const useGetPoolByAssetsQuery = (variables: GetPoolByAssetsQueryVariables) => useQuery<GetPoolQueryResponse>(\n    GET_POOL_BY_ASSETS, \n    { \n        variables,\n        notifyOnNetworkStatusChange: true,\n    }\n);","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { TradeType } from '../../../generated/graphql';\n\nconst SUBMIT_TRADE = loader('./../graphql/SubmitTrade.mutation.graphql');\n\nexport interface SubmitTradeMutationVariables {\n    assetAId: string,\n    assetBId: string,\n    assetAAmount: string,\n    assetBAmount: string,\n    poolType: PoolType,\n    tradeType: TradeType,\n    amountWithSlippage: string\n}\n\nexport const useSubmitTradeMutation = () => useMutation<void, SubmitTradeMutationVariables>(\n    SUBMIT_TRADE, \n    {\n        notifyOnNetworkStatusChange: true\n    }\n)\n\n/**\n * lbp.buy(assetOut, assetIn, amount, maxLimit)\n * lbp.sell(assetIn, assetOut, amount, maxLimit)\n * \n * exchange.buy(assetBuy, assetSell, amountBuy, maxSold, discount)\n * exchange.sell(assetSell, assetBuy, amountSell, minBought, discount)\n */\n\n","import { first } from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport { Pool } from '../../generated/graphql';\nimport { useMathContext } from '../math/useMath';\n\nexport const getAssetBalance = (pool?: Pool, assetId?: string) => (\n    first(\n        pool?.balances\n            ?.filter(balance => balance.assetId === assetId)\n    )?.balance\n)\n\nexport const useAssetBalance = (pool?: Pool, assetId?: string) => (\n    useMemo(() => getAssetBalance(pool, assetId), [pool, assetId])\n)\n\n// export const oneWithPrecision = '1000000000000'; // 10^12 doesnt work, use 10^9 instead\nexport const oneWithPrecision = '1000000000000'; // 10^12 doesnt work, use 10^9 instead\nexport const useSpotPrice = (\n    pool?: Pool,\n    assetAId?: string,\n    assetBId?: string\n) => {\n    const { math } = useMathContext();\n\n    return useMemo(() => {\n        const assetABalance = getAssetBalance(pool, assetAId)\n        const assetBBalance = getAssetBalance(pool, assetBId)\n\n        if (!assetABalance || !assetBBalance || !math) return;\n\n        return math.get_spot_price(\n            assetABalance,\n            assetBBalance,\n            oneWithPrecision,\n        )\n    }, [math, pool]);\n}","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\n\nexport const PRECISION_12 = 12;\nexport const PRECISION_18 = 18;\nexport const precision12 = new BigNumber(10).pow(PRECISION_12);\nexport const precision18 = new BigNumber(10).pow(PRECISION_18);\n\nexport const fromPrecision12 = (amount?: string | BigNumber) => (\n    amount && new BigNumber(amount)\n        .dividedBy(precision12).toFixed(PRECISION_12)\n)\nexport const useFromPrecision12 = (amount?: string | BigNumber) => (\n    useMemo(() => fromPrecision12(amount), [amount])\n)\n\nexport const useFromPrecision18 = (amount?: string | BigNumber) => (\n    useMemo(() => (\n        amount && new BigNumber(amount)\n            .dividedBy(precision18).toFixed(PRECISION_18)\n    ), [amount])\n)","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\nimport { PRECISION_12 } from './useFromPrecision';\n\nexport const PRECISION_0 = 0;\nexport const precision12 = new BigNumber(10).pow(12);\nexport const precision18 = new BigNumber(10).pow(18);\n\nexport const toPrecision12 = (amount?: string | BigNumber) => (\n    amount && new BigNumber(amount)\n            .multipliedBy(precision12).toFixed(PRECISION_0)\n);\nexport const useToPrecision12 = (amount?: string | BigNumber) => (\n    useMemo(() => toPrecision12(amount), [amount])\n)\n\nexport const useToPrecision18 = (amount?: string | BigNumber) => (\n    useMemo(() => (\n        amount && new BigNumber(amount)\n            .multipliedBy(precision18).toFixed(PRECISION_0)\n    ), [amount])\n)","import BigNumber from 'bignumber.js'\nimport { useMemo } from 'react';\nimport { toPrecision12 } from './useToPrecision';\n\nexport const percentageChange = (a?: string | BigNumber, b?: string | BigNumber) => {\n    if (!a || !b) return;\n    \n    const aBN = new BigNumber(a);\n    const bBN = new BigNumber(b);\n\n    return (bBN.minus(aBN))\n        .dividedBy(aBN)\n}\nexport const usePercentageChange = (a?: string, b?: string) => (\n    useMemo(() => percentageChange(a, b), [{a, b}])\n)","import BigNumber from 'bignumber.js';\nimport { isNaN } from 'lodash';\nimport { useMemo } from 'react';\nimport { TradeType } from '../../generated/graphql';\nimport { fromPrecision12 } from '../math/useFromPrecision';\nimport { percentageChange } from '../math/usePercentageChange';\nimport { toPrecision12 } from '../math/useToPrecision';\n\nexport const calculateSlippage = (\n    spotPrice: string,\n    assetAAmount: string,\n    assetBAmount: string,\n) => {\n    const spotPriceAmount = new BigNumber(spotPrice)\n        .multipliedBy(\n            fromPrecision12(assetBAmount)!\n        )\n        .toFixed(0);\n\n    const resultPercentageChange = percentageChange(\n        spotPriceAmount,\n        assetAAmount\n    );\n\n    if (!resultPercentageChange || resultPercentageChange.isNaN()) return;\n\n    // TODO: don't use this for every bignumber call\n    // TODO: fix edge cases for .09 decimal formatting\n    BigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_UP });\n    const percentualSlippage = new BigNumber(resultPercentageChange)\n        .multipliedBy(100)\n        .abs()\n        .toFixed(10) // TODO: deal with formatting to 2 decimal places when displaying the result\n\n    return {\n        percentualSlippage,\n        spotPriceAmount\n    }\n}\n\n/**\n * Slippage is the percieved difference between\n * the given `spotPrice` and the given assetAmount`\n * \n * @param spotPrice\n * @param assetAmount \n * @returns \n */\nexport const useSlippage = (\n    tradeType: TradeType,\n    spotPrice: {\n        aToB?: string,\n        bToA?: string\n    },\n    assetAAmount?: string,\n    assetBAmount?: string,\n) => {\n    if (!spotPrice.aToB || !spotPrice.bToA || !assetAAmount || !assetBAmount) return;\n    return calculateSlippage.apply(null,\n        tradeType === TradeType.Buy\n            ? [spotPrice.aToB, assetAAmount, assetBAmount]\n            : [spotPrice.bToA, assetBAmount, assetAAmount]\n    )\n}","import { isEqual, nth } from 'lodash';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Pool, TradeType } from '../generated/graphql';\nimport { useGetAssetsQuery } from '../hooks/assets/queries/useGetAssetsQuery';\nimport { useGetPoolByAssetsQuery } from '../hooks/pools/queries/useGetPoolByAssetsQuery';\nimport { useForm, UseFormReturn } from 'react-hook-form';\nimport { useSubmitTradeMutation } from '../hooks/pools/mutations/useSubmitTradeMutation';\nimport { PoolType } from '../components/Chart/shared';\nimport { useCalculateInGivenOut } from '../hooks/pools/useCalculateInGivenOut';\nimport { useCalculateOutGivenIn } from '../hooks/pools/useCalculateOutGivenIn';\nimport { fromPrecision12, useFromPrecision12 } from '../hooks/math/useFromPrecision';\nimport { toPrecision12 } from '../hooks/math/useToPrecision';\nimport { usePool } from '../hooks/pools/usePool';\nimport { useSlippage } from '../hooks/pools/useSlippage';\nimport { applyAllowedSlippage, applyTradeFee } from '../hooks/pools/resolvers/useSubmitTradeMutationResolvers';\nimport { AnyNaptrRecord } from 'dns';\n\n/**\n * Maintain which tradeType is currently active based on\n * which input have been interacted with last.\n * @returns \n */\nexport const useTradeType = () => {\n    const [tradeType, setTradeType] = useState<TradeType>(TradeType.Sell);\n\n    // when the asset amount inputs are manually updated, change the trade type accordingly\n    const onAssetAAmountInput = () => setTradeType(TradeType.Sell)\n    const onAssetBAmountInput = () => setTradeType(TradeType.Buy)\n\n    return {\n        tradeType,\n        onAssetAAmountInput,\n        onAssetBAmountInput\n    }\n}\n\n/**\n * Fetch available assets and watch the form for assetId updates.\n * If any form assets update, notify the parent via the callback.\n * \n * TODO: maybe decouple the onAssetIdsChange logic to a separate hook?\n * @param onAssetIdsChange \n * @param watch \n * @returns \n */\nexport const useAssets = (onAssetIdsChange: onAssetsIdsChange, watch: any) => {\n    // should actually use the network status instead\n    const { data: assets, loading } = useGetAssetsQuery();\n    const [assetAId] = watch(['assetAId', 'assetAAmount']);\n    const [assetBId] = watch(['assetBId', 'assetBAmount']);\n\n    // when the user selects a new asset pair, notify the parent\n    useEffect(() => { onAssetIdsChange(assetAId, assetBId) }, [assetAId, assetBId]);\n\n    return {\n        assets,\n        loading,\n        assetAId,\n        assetBId\n    }\n}\n\n/**\n * Construct the trade form with appropriate defaults, including\n * the form submit behaviour.\n * \n * @param pool\n * @param tradeType \n * @returns \n */\nexport const useTradeForm = (\n    pool?: Pool,\n    tradeType?: TradeType\n) => {\n    // gql mutation for sending executing pool trades\n    const [submitTrade] = useSubmitTradeMutation();\n    // TODO: form value types\n    const form = useForm<any, any>({\n        defaultValues: {\n            assetAAmount: '0',\n            assetBAmount: '0',\n            allowedSlippage: '5',\n            // we're making the amount after slippage part of the form as a 'hidden field'\n            // to make carrying over the value easier\n            amountWithSlippage: undefined\n        }\n    });\n    \n    /**\n     * When the form is submitted, submit a trade constructed\n     * from the available pool/form/tradeType data.\n     * @param data \n     * @returns \n     */\n    const handleSubmit = (data: any) => {\n        if (!pool || !tradeType) return;\n\n        submitTrade({\n            variables: {\n                assetAId: data.assetAId,\n                assetBId: data.assetBId,\n                assetAAmount: toPrecision12(data.assetAAmount)!,\n                assetBAmount: toPrecision12(data.assetBAmount)!,\n                amountWithSlippage: data.amountWithSlippage,\n                tradeType,\n                poolType: pool?.__typename === 'XYKPool' ? PoolType.XYK : PoolType.LBP\n            }\n        })\n    }\n\n    return {\n        form,\n        handleSubmit: handleSubmit\n    }\n}\n\n/**\n * After the assets are done loading, set default form values for assetIds\n * \n * TODO: this will be done at a higher level (router or such), where the query \n * parameters are parsed (poolId, assetA, assetB, tradeType)\n * \n * @param assetsLoading\n * @param setValue \n */\nexport const useDefaultFormAssets = (assetsLoading?: boolean, setValue?: any) => {\n    // TODO add default assets as props via router query params\n    // set default assets on the trade page\n    useEffect(() => {\n        if (assetsLoading) return;\n        setValue('assetAId', '0');\n        setValue('assetBId', '1');\n    }, [assetsLoading])\n}\n\n/**\n * Set form amounts for asset A or B depending on the current trade type\n * @param pool \n * @param tradeType \n * @param param2 \n */\nexport const useCalculatedAssetAmounts = (\n    form: UseFormReturn,\n    pool?: Pool,\n    tradeType?: TradeType,\n) => {\n    // calculated amounts depending on if the user is interacting as buy/sell\n    const { \n        inGivenOutWithFee: calculatedAssetAAmount, \n        inGivenOut: calculatedAssetAAmountWithoutFee \n    } = useCalculateInGivenOut(\n        pool,\n        form.getValues('assetAId'),\n        form.getValues('assetBId'),\n        toPrecision12(form.getValues('assetBAmount')),\n        tradeType,\n    ) || {}\n    \n    const { \n        outGivenInWithFee: calculatedAssetBAmount, \n        outGivenIn: calculatedAssetBAmountWithoutFee\n    } = useCalculateOutGivenIn(\n        pool,\n        form.getValues('assetAId'),\n        form.getValues('assetBId'), \n        toPrecision12(form.getValues('assetAAmount')), // 1\n        tradeType \n    ) || {}\n\n    useEffect(() => {\n        if (tradeType === TradeType.Buy) form.setValue('assetAAmount', fromPrecision12(calculatedAssetAAmount));\n        if (tradeType === TradeType.Sell) form.setValue('assetBAmount', fromPrecision12(calculatedAssetBAmount));\n    }, [\n        calculatedAssetAAmount,\n        calculatedAssetBAmount\n    ]);\n\n    return {\n        calculatedAssetAAmount,\n        calculatedAssetAAmountWithoutFee,\n        calculatedAssetBAmount,\n        calculatedAssetBAmountWithoutFee\n    }\n}\n\n/**\n * \n * @param form \n * @param slippage \n * @param tradeType \n */\nexport const useApplyAllowedSlippage = (\n    form: UseFormReturn<any, any>, \n    slippage: any,\n    tradeType: TradeType\n) => {\n    useEffect(() => {\n        if (!slippage?.spotPriceAmount) return;\n        \n        // TODO: handle a NaN case\n        form.setValue('amountWithSlippage',\n            applyAllowedSlippage(\n                slippage?.spotPriceAmount, \n                form.getValues('allowedSlippage'), \n                tradeType\n            )\n        );\n\n    }, [\n        form.watch(['allowedSlippage']),\n        slippage?.spotPriceAmount\n    ]);\n}\n\nexport type onAssetsIdsChange = (assetAId: string, assetBId: string) => void;\n\nexport const TradeForm = ({\n    onAssetIdsChange,\n    pool\n}: {\n    onAssetIdsChange: onAssetsIdsChange\n    pool?: Pool\n}) => {\n    const { tradeType, onAssetAAmountInput, onAssetBAmountInput } = useTradeType();\n    const { form, handleSubmit } = useTradeForm(pool, tradeType);\n    const { register, watch, getValues, setValue } = form;\n    const { assets, loading: assetsLoading, assetAId, assetBId } = useAssets(onAssetIdsChange, watch);\n\n    useDefaultFormAssets(assetsLoading, setValue)\n\n    const { liquidity, spotPrice } = usePool(pool, assetAId, assetBId);\n    const { \n        calculatedAssetAAmount,\n        calculatedAssetAAmountWithoutFee,\n        calculatedAssetBAmount,\n        calculatedAssetBAmountWithoutFee\n    } = useCalculatedAssetAmounts(form, pool, tradeType);\n\n    const slippage = useSlippage(\n        tradeType,\n        spotPrice,\n        calculatedAssetAAmount,\n        calculatedAssetBAmount\n    )\n    \n    useApplyAllowedSlippage(form, slippage, tradeType)\n    \n    // show all the asset options\n    const assetOptions = useCallback((withoutAssetId: string | undefined) => {\n        return <>\n            {assets\n                ?.assets\n                .filter(asset => asset.id !== withoutAssetId)\n                .map(asset => (\n                    <option key={asset.id} value={`${asset.id}`}>{asset.id}</option>\n                ))\n            }\n        </>\n    }, [assets]);\n\n    return <div>\n        {assetsLoading\n            ? <i>[TradeForm] Loading assets...</i>\n            : <i>[TradeForm] Everything is up to date</i>\n        }\n\n        <br /><br />\n\n        <form onSubmit={form.handleSubmit(handleSubmit)}>\n            <div>\n                <div>\n                    <label><b>(Pay with) Asset A: </b></label>\n                    <select\n                        {...register('assetAId', {\n                            required: true\n                        })}\n                    >\n                        {assetOptions(getValues('assetBId'))}\n                    </select>\n                </div>\n                <div>\n                    <div>\n                        <input\n                            type=\"text\"\n                            width={100}\n                            style={{\n                                width: '100%',\n                                marginTop: '12px',\n                                marginBottom: '24px'\n                            }}\n                            {...register('assetAAmount', {\n                                required: true\n                            })}\n                            onInput={onAssetAAmountInput}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div>\n                <label><b>(You get) Asset B: </b></label>\n                <select\n                    {...register('assetBId', {\n                        required: true\n                    })}\n                >\n                    {assetOptions(getValues('assetAId'))}\n                </select>\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    width={100}\n                    style={{\n                        width: '100%',\n                        marginTop: '12px',\n                        marginBottom: '24px'\n                    }}\n                    {...register('assetBAmount', {\n                        required: true\n                    })}\n                    onInput={onAssetBAmountInput}\n                />\n            </div>\n            <div>\n                <label><b>(%) Slippage: </b></label>\n            </div>\n            <div>\n                <input\n                    type=\"text\"\n                    width={100}\n                    style={{\n                        width: '100%',\n                        marginTop: '12px',\n                        marginBottom: '24px'\n                    }}\n                    {...register('allowedSlippage', {\n                        required: true\n                    })}\n                />\n            </div>\n            <button\n                type='submit'\n                style={{\n                    width: '100%',\n                }}\n            >Trade</button>\n\n            <br /><br />\n\n            <div>\n                <p><b>Trade type:</b> {tradeType}</p>\n                <div>\n                    {!pool\n                        ? <b>Pool does not exist</b>\n                        : <div>\n                            <p><b>Pool Id:</b> {pool?.id}</p>\n                            <p><b>Pool type:</b> {pool?.__typename}</p>\n                            <p><b>Liquidity Asset A:</b> {fromPrecision12(liquidity.assetA.balance)}</p>\n                            <p><b>Liquidity Asset B:</b> {fromPrecision12(liquidity.assetB.balance)}</p>\n                            <p><b>Spot prices:</b>\n                                <br/>\n                                <span>1 B = {fromPrecision12(spotPrice.aToB)} A</span>\n                                <br/>\n                                <span>1 A = {fromPrecision12(spotPrice.bToA)} B</span>\n                            </p>\n                            <p>\n                                <b>Slippage ({tradeType}): </b> \n                                {slippage \n                                    ? `${slippage.percentualSlippage}% / ${fromPrecision12(slippage.spotPriceAmount)}`\n                                    : '-'\n                                }\n                            </p>\n                            <p>\n                                <b>Calculated amount with slippage: </b> \n                                {fromPrecision12(form.getValues('amountWithSlippage'))}\n                            </p>\n\n                            <p>\n                                <b>Calculated amount without fee (A/B): </b> \n                                {`${fromPrecision12(calculatedAssetAAmountWithoutFee)} / ${fromPrecision12(calculatedAssetBAmountWithoutFee)}`}\n                            </p>\n                        </div>\n                    }\n                </div>\n            </div>\n        </form>\n    </div>\n}\n\nexport const TradePage = () => {\n    const [assetIds, setAssetIds] = useState<{\n        assetAId: undefined | string,\n        assetBId: undefined | string\n    }>({\n        assetAId: undefined,\n        assetBId: undefined\n    })\n\n    const { data: poolData, loading, error } = useGetPoolByAssetsQuery(assetIds);\n    error && console.error(error);\n\n    const handleAssetIdsChange = (assetAId: string, assetBId: string) => {\n        const newIds = { assetAId, assetBId };\n        if (isEqual(assetIds, newIds)) return;\n        setAssetIds(newIds)\n    }\n\n    return <div>\n        <h1>Trade</h1>\n\n        {loading\n            ? <i>[TradePage] Loading pools...</i>\n            : <i>[TradePage] Pools are up to date</i>\n        }\n\n        <br /><br />\n\n        <TradeForm\n            onAssetIdsChange={handleAssetIdsChange}\n            pool={poolData?.pool}\n        />\n    </div>\n}","import { Pool, TradeType } from '../../generated/graphql';\nimport { useMathContext } from '../math/useMath'\nimport { applyTradeFee } from './resolvers/useSubmitTradeMutationResolvers';\nimport { getAssetBalance } from './useSpotPrice';\n\nexport const useCalculateInGivenOut = (\n    pool?: Pool,\n    assetAId?: string,\n    assetBId?: string,\n    assetBBalanceInput?: string,\n    tradeType?: TradeType,\n) => {\n    const { math } = useMathContext();\n    const assetABalance = getAssetBalance(pool, assetAId)\n    const assetBBalance = getAssetBalance(pool, assetBId)\n\n    if (!assetABalance || !assetBBalance || !math || !assetBBalanceInput || !tradeType) return;\n\n    const inGivenOut = math?.calculate_in_given_out(\n        assetABalance, // out_reserve\n        assetBBalance, // in_reserve\n        assetBBalanceInput, // amount_out\n    );\n\n    if (!inGivenOut) return;\n\n    return {\n        inGivenOut,\n        inGivenOutWithFee: applyTradeFee(\n            inGivenOut,\n            '0.002',\n            tradeType\n        )\n    }\n}","import { Pool, TradeType } from '../../generated/graphql';\nimport { useMathContext } from '../math/useMath'\nimport { applyTradeFee } from './resolvers/useSubmitTradeMutationResolvers';\nimport { getAssetBalance } from './useSpotPrice';\n\nexport const useCalculateOutGivenIn = (\n    pool?: Pool,\n    assetAId?: string,\n    assetBId?: string,\n    assetABalanceInput?: string,\n    tradeType?: TradeType\n) => {\n    const { math } = useMathContext();\n    const assetABalance = getAssetBalance(pool, assetAId)\n    const assetBBalance = getAssetBalance(pool, assetBId)\n\n    if (!assetABalance || !assetBBalance || !math || !assetABalanceInput || !tradeType) return;\n\n    const outGivenIn = math?.calculate_out_given_in(\n        assetABalance, // in_reserve\n        assetBBalance, // out_reserve\n        assetABalanceInput, // amount_in\n    )\n\n    if (!outGivenIn) return;\n\n    return {\n        outGivenIn,\n        outGivenInWithFee: applyTradeFee(\n            outGivenIn,\n            '0.002',\n            tradeType\n        )\n    }\n}","import { Pool } from '../../generated/graphql';\nimport { useFromPrecision12 } from '../math/useFromPrecision';\nimport { useAssetBalance, useSpotPrice } from './useSpotPrice';\n\nexport const usePool = (\n    pool?: Pool,\n    assetAId?: string,\n    assetBId?: string,\n) => {\n    const liquidityAssetA = useAssetBalance(pool, assetAId);\n    const liquidityAssetB = useAssetBalance(pool, assetBId);\n\n    const spotPriceAToB = useSpotPrice(pool, assetBId, assetAId);\n    const spotPriceBToA = useSpotPrice(pool, assetAId, assetBId);\n\n    return {\n        liquidity: {\n            assetA: {\n                balance: liquidityAssetA,\n            },\n            assetB: {\n                balance: liquidityAssetB,\n            }\n        },\n        spotPrice: {\n            aToB: spotPriceAToB,\n            bToA: spotPriceBToA\n        }\n    }\n}","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { GET_ACTIVE_ACCOUNT } from '../queries/useGetActiveAccountQuery';\n\nexport const SET_ACTIVE_ACCOUNT = loader('./../graphql/SetActiveAccount.mutation.graphql');\n\nexport interface SetActiveAccountMutationVariables {\n    id: string | undefined\n}\n\nexport const useSetActiveAccountMutation = (variables: SetActiveAccountMutationVariables) => useMutation<void, SetActiveAccountMutationVariables>(\n    SET_ACTIVE_ACCOUNT,\n    {\n        variables,\n        refetchQueries: [\n            // TODO: figure out why do we need to refetch active account manually,\n            // while all accounts query gets updated automatically\n            GET_ACTIVE_ACCOUNT\n        ]\n    }\n)","import { useMemo } from 'react';\nimport { Account as AccountModel } from '../generated/graphql';\nimport { useSetActiveAccountMutation } from '../hooks/accounts/mutations/useSetActiveAccountMutation';\nimport { useGetAccountsQuery } from '../hooks/accounts/queries/useGetAccountsQuery'\nimport { useGetExtensionQuery } from '../hooks/polkadotJs/useGetExtensionQuery';\n\nexport const Account = ({ account }: { account?: AccountModel }) => {\n    // TODO: you can get the loading state of the mutation here as well\n    // but it probably needs to be turned into a contextual mutation\n    // in order to share the loading state accross multiple mutation hook calls\n    const [setActiveAccount] = useSetActiveAccountMutation({\n        id: account?.id\n    });\n\n    const [unsetActiveAccount] = useSetActiveAccountMutation({\n        id: undefined\n    });\n\n    return (\n        <div style={{\n            marginBottom: '24px',\n            padding: '12px',\n            paddingLeft: 0\n        }}>\n            <h3>\n                {account?.name}\n                {account?.isActive\n                    ? ' [active]'\n                    : <></>\n                }\n            </h3>\n            <p>\n                <b>Address:</b>\n                {account?.id}\n            </p>\n            <div>\n                <b>Balances:</b>\n                {account?.balances.map((balance, i) => (\n                    <p key={i}>\n                        {balance.assetId}:\n                        <i> {balance.balance}</i>\n                    </p>\n                ))}\n            </div>\n            <button\n                onClick={_ => account?.isActive ? unsetActiveAccount() : setActiveAccount()}\n            >\n                {account?.isActive ? 'Unset active' : 'Set active'}\n            </button>\n        </div>\n    )\n}\n\nexport const WalletPage = () => {\n    const { data: accountsData, loading: accountsLoading } = useGetAccountsQuery();\n    const { data: extensionData, loading: extensionLoading } = useGetExtensionQuery();\n\n    const loading = useMemo(() => {\n        return accountsLoading || extensionLoading;\n    }, [accountsLoading, extensionLoading])\n\n    return <div style={{\n        textAlign: 'left'\n    }}>\n        <h1>Accounts</h1>\n\n        {loading\n            ? <i>[WalletPage] Loading accounts...</i>\n            : <i>[WalletPage] Everything is up to date</i>\n        }\n\n        <br /><br />\n\n        {extensionData?.extension.isAvailable\n            ? (\n                <div>\n                    {accountsData?.accounts?.map((account, i) => (\n                        <Account\n                            key={i}\n                            account={account}\n                        />\n                    ))}\n                </div>\n            )\n            : <p>Extension unavailable</p>\n        }\n    </div>\n}","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { TradePage } from '../pages/TradePage';\nimport { WalletPage } from '../pages/WalletPage';\n\nexport const Router = () => {\n    return (\n        <Routes>\n            <Route path='/' element={<TradePage />} />\n            <Route path='wallet' element={<WalletPage />} />\n            <Route path=\"*\" element={<Navigate to='/'/>}/>\n        </Routes>\n    )\n}","import { first } from 'lodash';\nimport { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useGetActiveAccountQuery } from '../hooks/accounts/queries/useGetActiveAccountQuery';\nimport { nativeAssetId } from '../hooks/balances/useGetBalancesByAddress';\nimport { useLastBlockQuery } from '../hooks/lastBlock/useLastBlockQuery';\nimport { useGetExtensionQuery } from '../hooks/polkadotJs/useGetExtensionQuery';\nexport const AppBar = () => {\n    // TODO: there is no loading state for last block\n    // since its populated in the cache manually\n    const { data: lastBlockData } = useLastBlockQuery();\n    const { data: activeAccountData, loading: activeAccountLoading } = useGetActiveAccountQuery();\n    const { data: extensionData, loading: extensionLoading } = useGetExtensionQuery();\n    \n    // TODO: should probably be showing the fee payment asset here\n    const nativeAssetBalance = useMemo(() => (\n        first(\n            activeAccountData?.account?.balances\n                ?.filter(balance => balance.assetId === nativeAssetId)\n        )?.balance\n    ), [activeAccountData])\n\n    return (\n        <div style={{\n            textAlign: 'center',\n            marginBottom: '24px'\n        }}>\n            <div>\n                <Link to='/'>\n                    Trade\n                </Link>\n                {' | '}\n                <Link to='/wallet'>\n                    Wallet\n                </Link>\n                {' | '}\n                <Link to='/config'>\n                    Config\n                </Link>\n\n                <div>\n                    <span>\n                        <b>Last block: </b>\n                        {lastBlockData?.lastBlock?.parachainBlockNumber\n                            ? `#${lastBlockData?.lastBlock?.parachainBlockNumber} / #${lastBlockData?.lastBlock?.relaychainBlockNumber}`\n                            : 'loading...'\n                        }\n                    </span>\n                    {' | '}\n                    <span>\n                        <b>Active account: </b>\n                        {extensionLoading\n                            ? (\n                                'loading...'\n                            )\n                            : (\n                                extensionData?.extension.isAvailable\n                                    ? (\n                                        <>\n                                            {activeAccountLoading\n                                                ? (\n                                                    'loading...'\n                                                )\n                                                : (\n                                                    activeAccountData?.account?.name\n                                                        ? (\n                                                            <>\n                                                                <span>\n                                                                    {activeAccountData?.account?.name}\n                                                                    {' | '}\n                                                                    {nativeAssetBalance} BSX\n                                                                </span>\n                                                            </>\n                                                        )\n                                                        : (\n                                                            <Link to='/wallet'>\n                                                                select an account\n                                                            </Link>\n                                                        )\n                                                )\n                                            }\n                                        </>\n                                    )\n                                    : (\n                                        <span>Extension unavailable</span>\n                                    )\n                            )\n                        }\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useLoading } from '../hooks/misc/useLoading'\nimport { AppBar } from './AppBar'\n\nexport const PageContainer = ({ children }: { children: React.ReactNode }) => {\n    const loading = useLoading();\n    return (\n        <div style={{\n            padding: '24px',\n            width: '650px',\n            margin: '0 auto'\n        }}>\n            <AppBar />\n            {loading\n                ? <div style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}>\n                    <i>Connecting to the node...</i>\n                </div>\n                : children\n            }\n        </div>\n    )\n}","import { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\n\nexport const useLoading = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    return !apiInstance || loading;\n}","import './App.scss';\nimport { MultiProvider } from './containers/MultiProvider';\nimport log from 'loglevel';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Router } from './containers/Router';\nimport { PageContainer } from './containers/PageContainer';\n\nlog.setLevel('info');\n\nexport const branch = process.env.REACT_APP_GIT_BRANCH;\nexport const baseName = branch?.length ? `basilisk-ui/${branch}/app` : undefined;\n\nexport const App = () => {\n  return (\n    <MultiProvider>\n      <BrowserRouter basename={baseName}>\n        <PageContainer>\n          <Router />\n        </PageContainer>\n      </BrowserRouter>\n    </MultiProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  // TODO: figure out a way to enable react strict mode\n  // without triggering duplicate graphql queries\n  // https://github.com/apollographql/react-apollo/issues/3906#issuecomment-636604835\n  // <React.StrictMode>\n    <App/>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}