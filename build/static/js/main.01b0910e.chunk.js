(this["webpackJsonpbasilisk-ui"]=this["webpackJsonpbasilisk-ui"]||[]).push([[0],{149:function(e,n,i){},163:function(e,n){},167:function(e,n){},171:function(e,n,i){},172:function(e,n,i){},173:function(e,n,i){},174:function(e,n,i){},175:function(e,n,i){"use strict";i.r(n);var t=i(1),a=i(103),s=i.n(a),d=(i(149),i(204)),l=i(207),o=i(177),r=i(9),c=i.n(r),u=i(13),m=i(104);const v={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetAccounts"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"accounts"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"isActive"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:260,source:{body:"\nquery GetAccounts {\n    lastBlock @client {\n        parachainBlockNumber,\n        relaychainBlockNumber\n    }\n    \n    accounts @client {\n        id,\n        name,\n        isActive,\n        balances {\n            assetId,\n            balance\n        }\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}};var p=i(68);const k={id:void 0},y=Object(p.a)("basilisk-active-account"),b=()=>y(k),g=()=>{const e=(()=>{const[e,n]=b();return Object(t.useCallback)((async(e,i)=>{var t;const a=null===(t=e.cache)||void 0===t?void 0:t.readQuery({query:v});if(!(null===a||void 0===a?void 0:a.accounts))return;const s=a.accounts.map((e=>({...e,isActive:e.id===i}))),d=Object(u.find)(s,{isActive:!0});return n({id:null===d||void 0===d?void 0:d.id}),s.forEach((n=>{e.cache.modify({id:e.cache.identify({__typename:n.__typename,id:n.id}),fields:{isActive:e=>n.isActive}})})),await new Promise((e=>setTimeout(e,0))),s}),[n])})();return N(Object(t.useCallback)((async(n,i,t)=>{let{client:a}=t;return e(a,i.id)}),[e]),"setActiveAccount")},N=(e,n)=>{const i=Object(t.useRef)(e);return Object(t.useEffect)((()=>{i.current=e}),[e]),function(){return c.a.debug("Running resolver",n),i.current.apply(void 0,arguments)}};var f=i(208),O=i(206),h=i(33),j={tokens:{AccountData:"OrmlAccountData"}},I=[{AssetPair:{asset_in:"AssetId",asset_out:"AssetId"},Amount:"i128",AmountOf:"Amount",Address:"AccountId",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},Fee:{numerator:"u32",denominator:"u32"},BalanceInfo:{amount:"Balance",assetId:"AssetId"},Chain:{genesisHash:"Vec<u8>",lastBlockHash:"Vec<u8>"},Currency:"AssetId",CurrencyId:"AssetId",CurrencyIdOf:"AssetId",Intention:{who:"AccountId",asset_sell:"AssetId",asset_buy:"AssetId",amount:"Balance",discount:"bool",sell_or_buy:"IntentionType"},IntentionId:"Hash",IntentionType:{_enum:["SELL","BUY"]},LookupSource:"AccountId",Price:"Balance",ClassId:"u64",TokenId:"u64",ClassData:{is_pool:"bool"},TokenData:{locked:"bool"},ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"ClassData"},TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"TokenData"},ClassInfoOf:"ClassInfo",TokenInfoOf:"TokenInfo",ClassIdOf:"ClassId",TokenIdOf:"TokenId",OrderedSet:"Vec<AssetId>",VestingSchedule:{start:"BlockNumber",period:"BlockNumber",period_count:"u32",per_period:"Compact<Balance>"},VestingScheduleOf:"VestingSchedule",LBPWeight:"u32",WeightCurveType:{_enum:["Linear"]},PoolId:"AccountId",BalanceOf:"Balance",AssetType:{_enum:{Token:"Null",PoolShare:"(AssetId,AssetId)"}},Pool:{owner:"AccountId",start:"BlockNumber",end:"BlockNumber",assets:"AssetPair",initial_weight:"LBPWeight",final_weight:"LBPWeight",weight_curve:"WeightCurveType",fee:"Fee",fee_collector:"AccountId"},AssetDetails:{name:"Vec<u8>",asset_type:"AssetType",existential_deposit:"Balance",locked:"bool"},AssetDetailsT:"AssetDetails",AssetMetadata:{symbol:"Vec<u8>",decimals:"u8"},AssetInstance:"AssetInstanceV1",MultiLocation:"MultiLocationV1",AssetNativeLocation:"MultiLocation",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1"}];const S={nodeUrl:"ws://localhost:9988",processorUrl:"/graphql",appName:"Basilisk UI"},T=Object(p.a)("basilisk-config"),A=()=>T(S);var B=i(87);const x={description:"Get pool account id by asset IDs",params:[{name:"assetInId",type:"u32"},{name:"assetOutId",type:"u32"}],type:"AccountId"},w={xyk:{getPoolAccount:x},lbp:{getPoolAccount:x}},[P,D]=Object(h.a)((()=>{const[{nodeUrl:e}]=A(),[n,i]=Object(t.useState)(void 0),a=Object(t.useMemo)((()=>!n),[n]),s=Object(t.useMemo)((()=>new f.a(e)),[e]),d=Object(t.useMemo)((()=>({...I[0],...B.types})),[]),l=Object(t.useMemo)((()=>({...j,...B.typesAlias})),[]);return Object(t.useEffect)((()=>((async()=>{i(void 0);const e=await O.a.create({provider:s,types:d,typesAlias:l,rpc:w});await e.isReady,i(e)})(),()=>{null===n||void 0===n||n.disconnect()})),[s]),{apiInstance:n,loading:a}})),F="0",_=()=>{const{apiInstance:e,loading:n}=D();return Object(t.useCallback)((async(n,i)=>{if(e&&n)return await(async(e,n,i)=>{var t;const a=[];if(!i||Object(u.includes)(i,F)){const i=await e.query.system.account(n);a.push({assetId:F,balance:null===i||void 0===i?void 0:i.data.free.toString()})}const s=(i=i?i.filter((e=>e!==F)):i)?(await e.query.tokens.accounts.multi(null===(t=i)||void 0===t?void 0:t.map((e=>[n,e])))).map(((e,n)=>({assetId:i[n],balance:e}))):(await e.query.tokens.accounts.entries(n)).map((e=>{let[n,i]=e;return{assetId:n.toHuman()[1],balance:i}}));return null===s||void 0===s||s.forEach((n=>{const i=null===e||void 0===e?void 0:e.createType("AccountData",n.balance).free.toString();a.push({assetId:n.assetId,balance:i})})),a})(e,n,i)}),[e,n])},C=()=>{const e=_();return{balances:N(Object(t.useCallback)((async(n,i)=>{var t;let a;return"LBPPool"!==n.__typename&&"XYKPool"!==n.__typename||(a=[(n=n).assetInId,n.assetOutId]),null===(t=await e(n.id,a))||void 0===t?void 0:t.map((e=>({...e,__typename:"Balance",id:"".concat(n.id,"-").concat(e.assetId)})))}),[e]),"balances")}},E="Vec<BalanceLock>",L=async(e,n,i)=>{const t=Object(u.find)(e.createType(E,await e.query.balances.locks(n)),(e=>e.id.eq(i))),a=(await e.query.tokens.locks.entries(n)).map((e=>{var n;let[i,t]=e;const a=t.toJSON()[0];return{id:null===a||void 0===a?void 0:a.id,amount:null===a||void 0===a||null===(n=a.amount)||void 0===n?void 0:n.toString()}})),s=Object(u.find)(a,(e=>(null===e||void 0===e?void 0:e.id)===i));return t||s},V=()=>{const e=(()=>{const{apiInstance:e,loading:n}=D();return Object(t.useCallback)((async n=>{var i;if(!e||!n)return;const t=Object(u.first)(e.createType("Vec<VestingScheduleOf>",await e.query.vesting.vestingSchedules(n))),a=await L(e,n,"ormlvest");return{remainingVestingAmount:null===a||void 0===a||null===(i=a.amount)||void 0===i?void 0:i.toString(),start:null===t||void 0===t?void 0:t.start.toString(),period:null===t||void 0===t?void 0:t.period.toString(),periodCount:null===t||void 0===t?void 0:t.periodCount.toString(),perPeriod:null===t||void 0===t?void 0:t.perPeriod.toString()}}),[e,n])})();return{vestingSchedule:N(Object(t.useCallback)((async n=>await e(n.id)),[e]),"vestingSchedule")}};var q=i(19),W=i(197),Q=i(121);const M="Account",G=()=>{const[e]=b(),n=Object(t.useCallback)((async(e,n)=>{await Object(q.b)("basilisk-ui");const i=(await Object(q.a)()).map((e=>({id:Object(W.a)(Object(Q.a)(e.address),10041),name:e.meta.name,isActive:!1}))).map((n=>({...n,isActive:e==n.id})));return n?Object(u.find)(i,{isActive:n}):i}),[]);return N(Object(t.useCallback)((async(i,t)=>{const a=await n(null===e||void 0===e?void 0:e.id,null===t||void 0===t?void 0:t.isActive);return a?Object(u.isArray)(a)?a.map((e=>({...e,__typename:M}))):{...a,__typename:M}:null}),[e,n]),"accounts")},R={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetLastBlock"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:112,source:{body:"query GetLastBlock {\n    lastBlock @client {\n        parachainBlockNumber,\n        relaychainBlockNumber\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},[X,H]=Object(h.a)((()=>{const{apiInstance:e,loading:n}=D(),[i,a]=Object(t.useState)(void 0),s=Object(t.useCallback)((()=>{e&&e.derive.chain.subscribeNewBlocks((async n=>{const i=await e.query.parachainSystem.validationData(),t=e.createType("Option<PolkadotPrimitivesV1PersistedValidationData>",i);if(t.isSome){t.toJSON();a({parachainBlockNumber:n.block.header.number.toString(),relaychainBlockNumber:"821"})}}))}),[e]);return Object(t.useEffect)((()=>{n||s()}),[n,s]),i})),K="LastBlock",Y=K,U=(e,n)=>e.writeQuery({query:R,data:{lastBlock:n}});var $=i(67);const J={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetActiveAccount"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"account"},name:{kind:"Name",value:"accounts"},arguments:[{kind:"Argument",name:{kind:"Name",value:"isActive"},value:{kind:"BooleanValue",value:!0}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"isActive"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"vestingSchedule"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"remainingVestingAmount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"start"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"period"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"periodCount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"perPeriod"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:607,source:{body:"# TODO: fetch only balances for the active fee payment asset\nquery GetActiveAccount {\n    lastBlock @client { \n        parachainBlockNumber,\n        relaychainBlockNumber,\n    }\n    \n    account: accounts(isActive: true) @client {\n        id,\n        name,\n        isActive,\n        balances {\n            assetId,\n            balance\n        },\n        vestingSchedule {\n            # figure out why this fragment doesnt work\n            # ...VestingScheduleFields,\n            remainingVestingAmount,\n            start,\n            period,\n            periodCount,\n            perPeriod\n        }\n    } \n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},z=()=>{var e,n;const i=Object($.a)(),a=Object(m.a)(J,{notifyOnNetworkStatusChange:!0});return Object(t.useEffect)((()=>{i.refetchQueries({})}),[null===(e=a.data)||void 0===e||null===(n=e.account)||void 0===n?void 0:n.id]),a},[Z,ee]=Object(h.a)(z),ne=async(e,n)=>new Promise((async(i,t)=>{try{i(await e(i,t))}catch(a){console.log("graceful error",a),(a=n.reduce(((e,n)=>n(e)),a))?t(a):i(null)}})),ie=e=>{if("Cancelled"!==(null===e||void 0===e?void 0:e.message))return e;c.a.error("Operation presumably cancelled by the user in the Polkadot.js extension")},te=(e,n,i)=>t=>{let{status:a,events:s=[],dispatchError:d}=t;var l;return a.isFinalized&&c.a.info("operation finalized"),s.forEach((e=>{let{event:{data:n,method:i,section:t},phase:a}=e;console.log("event handler",a.toString(),": ".concat(t,".").concat(i),n.toString())})),a.isInBlock?(console.log("is in block",null===(l=a.createdAtHash)||void 0===l?void 0:l.toString()),(null===d||void 0===d?void 0:d.isModule)?c.a.info("operation unsuccessful",i?i.registry.findMetaError(d.asModule):d):c.a.info("operation successful")):a.isBroadcast?(c.a.info("transaction has been broadcast",a.hash.toHuman()),e()):d?(c.a.error("There was a dispatch error",d),n("Dispatch error")):void 0},ae="Polkadot.js is not ready yet",se=()=>{const{apiInstance:e,loading:n}=D();return{claimVestedAmount:N(Object(t.useCallback)((async(i,t,a)=>{var s,d;let{cache:l}=a;const o=(null===t||void 0===t?void 0:t.address)?t.address:null===(s=l.readQuery({query:J}))||void 0===s||null===(d=s.account)||void 0===d?void 0:d.id;if(!o)throw new Error("No Account selected");if(n||!e)throw new Error(ae);return await ne((async(n,i)=>{const{signer:t}=await Object(q.c)(o);await e.tx.vesting.claim().signAndSend(o,{signer:t},te(n,i))}),[ie])}),[n,e]),"claimVestedAmount")}},de=e=>e.tx.currencies.transfer,le=()=>{const{apiInstance:e,loading:n}=D(),i=N(Object(t.useCallback)((async(i,t)=>{let{from:a,to:s,currencyId:d,amount:l}=t;if(!a||!s||!d||!l)throw new Error("Invalid transfer parameters provided");if(n||!e)throw new Error(ae);return ne((async(n,i)=>{const{signer:t}=await Object(q.c)(a);await de(e).apply(e,[s,d,l]).signAndSend(a,{signer:t},((e,n,i)=>t=>{let{status:a,dispatchError:s}=t;return a.isFinalized&&c.a.info("operation finalized"),a.isInBlock?(null===s||void 0===s?void 0:s.isModule)?c.a.error("transfer unsuccessful",e.registry.findMetaError(s.asModule)):c.a.info("transfer successful"):a.isBroadcast?(c.a.info("transaction has been broadcast"),n()):s?(c.a.error("There was a dispatch error",e.registry.findMetaError(s.asModule)),i()):void 0})(e,n,i))}),[ie])}),[e,n]));return{transferBalance:i}},oe="Extension",re="Config",ce=()=>{const[e]=A(),{apiInstance:n,loading:i}=D();return{config:N(Object(t.useCallback)((async(t,a,s)=>{var d,l,o;let{cache:r}=s;if(!n||i)return;const c=null===(d=r.readQuery({query:J}))||void 0===d||null===(l=d.account)||void 0===l?void 0:l.id;let u=c?null===(o=n.createType("Option<u32>",await n.query.multiTransactionPayment.accountCurrencyMap(c)))||void 0===o?void 0:o.toHuman():null;return u=u||"0",{__typename:re,id:"Config",...e,feePaymentAsset:u}}),[n,i]))}},ue=()=>{const{apiInstance:e,loading:n}=D(),[i,a]=A();return{setConfig:N(Object(t.useCallback)((async(i,t,s)=>{let{cache:d}=s;if(!e||n)return;await ne((async(n,i)=>{var a,s,l;const o=null===(a=d.readQuery({query:J}))||void 0===a||null===(s=a.account)||void 0===s?void 0:s.id;if(!o)return n();const{signer:r}=await Object(q.c)(o);await e.tx.multiTransactionPayment.setCurrency((null===(l=t.config)||void 0===l?void 0:l.feePaymentAsset)||"0").signAndSend(o,{signer:r},((e,n)=>te(e,n))(n,i))}),[ie]);const l=t.config;null===l||void 0===l||delete l.feePaymentAsset,a((()=>l||S))}),[e,n]))}},me=()=>{const{apiInstance:e,loading:n}=D();return{feePaymentAssets:N(Object(t.useCallback)((async()=>{if(!e||n)return;return(await e.query.multiTransactionPayment.acceptedCurrencies.entries()).map((e=>{const n=e[0].toHuman()[0];return{__typename:"FeePaymentAsset",id:n,assetId:n,fallbackPrice:e[1].toString()}}))}),[e,n]))}},ve=async()=>({xyk:await i.e(4).then(i.bind(null,215)),lbp:await i.e(3).then(i.bind(null,216))}),[pe,ke]=Object(h.a)((()=>{const[e,n]=Object(t.useState)({instance:void 0,loading:!0});return Object(t.useEffect)((()=>{(async()=>{n({instance:await ve(),loading:!1})})()}),[n]),{math:null===e||void 0===e?void 0:e.instance,loading:null===e||void 0===e?void 0:e.loading}})),ye=e=>{let[n,i]=e;return[n.toHuman()[0],i]};var be=i(11),ge=i.n(be);const Ne=new ge.a("100").multipliedBy(new ge.a("10").pow("6")),fe=e=>new ge.a(Ne).minus(new ge.a(e)).toFixed(0),Oe=(e,n,i,t)=>e.lbp.calculate_linear_weights(n.startBlock,n.endBlock,i.initial,i.final,t),he=e=>e.cache.readQuery({query:R}),je={numerator:"2",denominator:"10"},Ie=(e,n,i)=>async t=>{var a,s,d;let[l,o]=t;const r=o.toJSON(),c=he(n),u=null===c||void 0===c||null===(a=c.lastBlock)||void 0===a?void 0:a.relaychainBlockNumber;if(!r||!u)return;const m=r.feeCollector.toString(),v=i.createType("BalanceOf",r.repayTarget.toString()).toString(),p={id:l,assetInId:r.assets[0].toString(),assetOutId:r.assets[1].toString(),startBlock:r.start.toString(),endBlock:r.end.toString()},k={initial:r.initialWeight.toString(),final:r.finalWeight.toString()},y={...k,current:Oe(e,p,k,u)},b={initial:fe(y.initial),final:fe(y.final),current:fe(y.current)},g=null===(s=await L(i,m,"0x6c6270636c6c6374"))||void 0===s||null===(d=s.amount)||void 0===d?void 0:d.toString(),N=!(!v||!g)&&new ge.a(g).gt(new ge.a(v)),f={numerator:r.fee.numerator.toString(),denominator:r.fee.denominator.toString()};return{...p,assetAWeights:y,assetBWeights:b,repayTargetReached:N,fee:N?f:je}},Se=()=>{const{apiInstance:e,loading:n}=D(),{math:i}=ke();return Object(t.useCallback)((async t=>e&&!n&&i?(async(e,n,i)=>await Promise.all((await e.query.lbp.poolData.entries()).map(ye).map(Ie(n,i,e)))||[])(e,i,t):[]),[e,n,i])},Te=()=>{const{apiInstance:e}=D(),{math:n}=ke();return Object(t.useCallback)((async(i,t)=>{if(c.a.debug("useGetLbpPool",e,t,n),e&&t&&n)return(async(e,n,i,t)=>await Ie(e,n,i)([t,await i.query.lbp.poolData(t)]))(n,i,e,t)}),[e,n])},Ae=()=>{const{apiInstance:e,loading:n}=D(),i=Se(),a=(()=>{const{apiInstance:e,loading:n}=D();return Object(t.useCallback)((async(i,t)=>!e||n?[]:i?[await e.query.xyk.poolAssets(i)].map((e=>[i,e])).map((e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}})):(await e.query.xyk.poolAssets.entries()).map(ye).map((e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}}))||[]),[e,n])})(),s=(()=>{const{apiInstance:e,loading:n}=D();return Object(t.useCallback)((async i=>{if(e&&!n&&i)return(e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}})([i,await e.query.xyk.poolAssets(i)])}),[e,n])})(),d=Te();return N(Object(t.useCallback)((async(t,l,o)=>{if(!e||n||!(null===o||void 0===o?void 0:o.client))return;c.a.debug("useGetPoolsQueryResolver","fetching pools",l);let r=null===l||void 0===l?void 0:l.poolId,u={lbpPoolId:r,xykPoolId:r};if((null===l||void 0===l?void 0:l.assetIds)&&(u=await(async(e,n)=>({lbpPoolId:(await e.rpc.lbp.getPoolAccount(n[0],n[1])).toHuman(),xykPoolId:(await e.rpc.xyk.getPoolAccount(n[0],n[1])).toHuman()}))(e,l.assetIds),c.a.debug("useGetPoolsQueryResolver","found poolIDs",u,e)),u.xykPoolId||u.lbpPoolId){var m,v,p,k;let e=await d(o.client,u.lbpPoolId),n=await s(u.xykPoolId);c.a.debug("useGetPoolsQueryResolver","found pools by poolIDs",e,n),(null===(m=n)||void 0===m?void 0:m.assetInId)===(null===(v=n)||void 0===v?void 0:v.assetOutId)&&(n=void 0),(null===(p=e)||void 0===p?void 0:p.assetInId)===(null===(k=e)||void 0===k?void 0:k.assetOutId)&&(e=void 0),c.a.debug("useGetPoolsQueryResolver","eliminated default value pools",e,n);const i=n||e;return c.a.debug("useGetPoolsQueryResolver","returning a single pool",i),i&&{...i,__typename:n?"XYKPool":e?"LBPPool":void 0}}const[y,b]=await Promise.all([i(o.client),a()]);return c.a.debug("useGetPoolsQueryResolver","returning multiple pools",[y,b]),[].concat(null===y||void 0===y?void 0:y.map((e=>({...e,__typename:"LBPPool"})))).concat(null===b||void 0===b?void 0:b.map((e=>({...e,__typename:"XYKPool"}))))}),[i]),"pools")},Be=()=>{const{apiInstance:e,loading:n}=D(),i=(()=>{const{apiInstance:e,loading:n}=D();return Object(t.useCallback)((async()=>{if(e&&!n)return(await(null===e||void 0===e?void 0:e.query.assetRegistry.assetIds.entries())).map((e=>n=>{let[i,t]=n;return{id:e.createType("Option<u32>",t).toHuman()}})(e))||[]}),[e,n])})();return N(Object(t.useCallback)((async()=>{var e;return null===(e=await i())||void 0===e?void 0:e.map((e=>({...e,__typename:"Asset"})))}),[e,n]))};let xe,we,Pe,De;!function(e){e.D30="D30",e.D7="D7",e.H24="H24",e.H1="H1"}(xe||(xe={})),function(e){e.PRICE="PRICE",e.VOLUME="VOLUME",e.WEIGHTS="WEIGHTS"}(we||(we={})),function(e){e.LBP="LBP",e.XYK="XYK"}(Pe||(Pe={})),function(e){e.Buy="Buy",e.Sell="Sell"}(De||(De={}));const Fe=e=>{var n;return null===(n=e.readQuery({query:J,returnPartialData:!0}))||void 0===n?void 0:n.account},_e=async(e,n,i,t,a,s)=>{await ne((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found"));const{signer:c}=await Object(q.c)(r);await n.tx.lbp.buy(i,t,a,s).signAndSend(r,{signer:c},((e,n,i)=>te(e,n,i))(d,l,n))}),[ie])},Ce=async(e,n,i,t,a,s)=>{await ne((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found"));const{signer:c}=await Object(q.c)(r);await n.tx.lbp.sell(i,t,a,s).signAndSend(r,{signer:c},((e,n,i)=>te(e,n,i))(d,l,n))}),[ie])},Ee=async(e,n,i,t,a,s)=>{await ne((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found!"));const{signer:c}=await Object(q.c)(r);await n.tx.xyk.buy(i,t,a,s,false).signAndSend(r,{signer:c},((e,n,i)=>te(e,n,i))(d,l,n))}),[ie])},Le=async(e,n,i,t,a,s)=>{await ne((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found!"));const{signer:c}=await Object(q.c)(r);await n.tx.xyk.sell(i,t,a,s,false).signAndSend(r,{signer:c},((e,n,i)=>te(e,n,i))(d,l,n))}),[ie])},Ve=()=>({submitTrade:(()=>{const{apiInstance:e}=D();return N(Object(t.useCallback)((async(n,i,t)=>{let{cache:a}=t;if(i&&e){if((null===i||void 0===i?void 0:i.poolType)===Pe.XYK&&(null===i||void 0===i?void 0:i.tradeType)===De.Buy)return await Ee(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===Pe.XYK&&(null===i||void 0===i?void 0:i.tradeType)===De.Sell)return await Le(a,e,i.assetInId,i.assetOutId,i.assetInAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===Pe.LBP&&(null===i||void 0===i?void 0:i.tradeType)===De.Buy)return await _e(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===Pe.LBP&&(null===i||void 0===i?void 0:i.tradeType)===De.Sell)return await Ce(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);throw new Error("We dont support this trade type yet")}}),[Ee,Le,e]))})()}),qe=()=>{const{Query:e,Account:n}={Query:{accounts:G()},Account:{...C(),...V()}},{Query:i,XYKPool:a,LBPPool:s}=(()=>{const e=Ae(),n={...C()};return{Query:{pools:e},XYKPool:n,LBPPool:n}})();return{Query:{...e,extension:N(Object(t.useCallback)((async()=>{const e=await Object(q.b)("basilisk-ui");return{__typename:oe,id:"Extension",isAvailable:!!e.length}}),[])),...ce(),...me(),...C(),...i,assets:Be()},Mutation:{setActiveAccount:g(),...se(),...le(),...ue(),...Ve()},Account:n,XYKPool:a,LBPPool:s}},We={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Balance"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assetId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balance"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"VestingSchedule"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"remainingVestingAmount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"start"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"period"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"periodCount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"perPeriod"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Account"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"name"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"isActive"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"vestingSchedule"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"VestingSchedule"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"accounts"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Account"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"account"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Account"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"setActiveAccount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Account"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LastBlock"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"lastBlock"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"LastBlock"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Config"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"nodeUrl"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"processorUrl"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"appName"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feePaymentAsset"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"config"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Config"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Extension"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"isAvailable"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"extension"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Extension"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FeePaymentAsset"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assetId"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"fallbackPrice"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"feePaymentAssets"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FeePaymentAsset"}}}},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"PoolType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"LBP"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"XYK"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"TradeType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"Buy"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"Sell"},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LBPAssetWeights"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"initial"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"final"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"current"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Fee"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"numerator"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"denominator"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LBPPool"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"fee"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Fee"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"repayTargetReached"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetAWeights"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"LBPAssetWeights"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetBWeights"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"LBPAssetWeights"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"startBlock"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"endBlock"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"XYKPool"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}},directives:[]}]},{kind:"UnionTypeDefinition",name:{kind:"Name",value:"Pool"},directives:[],types:[{kind:"NamedType",name:{kind:"Name",value:"LBPPool"}},{kind:"NamedType",name:{kind:"Name",value:"XYKPool"}}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"pools"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Pool"}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"_tradeType"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"TradeType"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Asset"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assets"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Asset"}}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"_empty"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]}],loc:{start:0,end:3340,source:{body:"type Balance {\n    assetId: String!,\n    balance: String!\n}# https://github.com/open-web3-stack/open-runtime-module-library/blob/master/vesting/src/lib.rs#L11\ntype VestingSchedule {\n    # total locked amoount left to eventually be claimed\n    remainingVestingAmount: String,\n    # since this block\n    start: String,\n    # every `period` blocks\n    period: String,\n    # for number of periods\n    periodCount: String,\n    # claimable amount per period\n    perPeriod: String\n}#import \"./../../balances/graphql/Balance.graphql\"\n#import './../../vesting/graphql/VestingSchedule.graphql'\n\ntype Account {\n    id: String!,\n    name: String,\n    isActive: Boolean!,\n    balances: [Balance!]!,\n    vestingSchedule: VestingSchedule!\n}\n\nextend type Query {\n    accounts: [Account!]!\n    account: Account\n}\n\nextend type Mutation {\n    setActiveAccount: Account\n}type LastBlock {\n    id: String!\n    # yes, this is correct\n    parachainBlockNumber: String,\n    relaychainBlockNumber: String,\n}\n\nextend type Query {\n    lastBlock: LastBlock\n}type Config {\n    nodeUrl: String!,\n    processorUrl: String!,\n    appName: String!,\n    feePaymentAsset: String\n}\n\nextend type Query {\n    config: Config!\n}type Extension {\n    isAvailable: Boolean\n}\n\nextend type Query {\n    extension: Extension!\n}type FeePaymentAsset {\n    assetId: String,\n    # This price has 18 digit precision, instead of the usual 12\n    fallbackPrice: String\n}\n\n\nextend type Query {\n    feePaymentAssets: [FeePaymentAsset!]\n}#import './../../balances/graphql/Balance.graphql'\n\nenum PoolType {\n    LBP\n    XYK\n}\n\nenum TradeType {\n    Buy,\n    Sell\n}\n\n# figure out how to create a union between two types\n# that extend an interface, apparently this isnt possible as of now\n# \n# interface Pool {\n#     poolType: PoolType!,\n#     assetInId: String!,\n#     assetOutId: String!,\n#     assetABalance: String!,\n#     assetBBalance: String!,\n# }\n\ntype LBPAssetWeights {\n    initial: String!,\n    final: String!,\n    current: String!,\n}\n\ntype Fee {\n    numerator: String!,\n    denominator: String!,\n}\n\n# TODO: figure out which fields are populated at creation and at update\ntype LBPPool {\n    id: String!,\n    assetInId: String!,\n    assetOutId: String!,\n    balances: [Balance!]\n    fee: Fee!,\n    repayTargetReached: Boolean!,\n    assetAWeights: LBPAssetWeights!,\n    assetBWeights: LBPAssetWeights!,\n    startBlock: String!,\n    endBlock: String!\n}\n\ntype XYKPool {\n    id: String!,\n    assetInId: String!,\n    assetOutId: String!,\n    balances: [Balance!]\n}\n\nunion Pool = LBPPool | XYKPool\n\nextend type Query {\n    pools: [Pool!]\n    # Just to make sure TradeType makes it through the codegen\n    # otherwise it'd be ignored\n    _tradeType: TradeType\n}type Asset {\n    id: String!\n}\n\nextend type Query {\n    assets: [Asset!]\n}#import './hooks/accounts/graphql/Accounts.graphql'\n#import './hooks/lastBlock/graphql/LastBlock.graphql'\n#import './hooks/config/graphql/Config.graphql'\n#import './hooks/vesting/graphql/VestingSchedule.graphql'\n#import './hooks/polkadotJs/graphql/Extension.graphql'\n#import './hooks/feePaymentAssets/graphql/FeePaymentAssets.graphql'\n#import './hooks/pools/graphql/Pool.graphql'\n#import './hooks/assets/graphql/Asset.graphql'\n\nextend type Query {\n    # just a placeholder to make the codegen not complain about\n    # root query not being defined\n    _empty: String\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Qe=()=>{const e=qe(),n=new l.a,[{processorUrl:i}]=A(),a=Object(t.useMemo)((()=>new o.a({uri:i,cache:n,connectToDevTools:!0,queryDeduplication:!0,resolvers:e,typeDefs:We})),[i]);return(e=>{const n=H();Object(t.useEffect)((()=>{U(e.cache,{__typename:K,id:Y,...n})}),[]),Object(t.useEffect)((()=>{var i;if(!n)return;const t=e.cache.readQuery({query:R});(null===t||void 0===t||null===(i=t.lastBlock)||void 0===i?void 0:i.parachainBlockNumber)?e.refetchQueries({updateCache(e){U(e,{__typename:K,id:Y,...n})}}):U(e.cache,{__typename:K,id:Y,...n})}),[n])})(a),a};var Me=i(203);const Ge={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetExtension"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"extension"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"isAvailable"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:72,source:{body:"query GetExtension {\n    extension @client {\n        isAvailable\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Re=()=>Object(m.a)(Ge,{notifyOnNetworkStatusChange:!0}),[Xe,He]=Object(h.a)((()=>Object(Me.a)(Ge,{notifyOnNetworkStatusChange:!0})));var Ke=i(5);const Ye=e=>{let{children:n}=e;const i=Qe();return Object(Ke.jsx)(d.a,{client:i,children:n})},Ue=e=>{let{children:n}=e;return Object(Ke.jsx)(Xe,{children:n})},$e=e=>{let{children:n}=e;return Object(Ke.jsx)(P,{children:Object(Ke.jsx)(pe,{children:Object(Ke.jsx)(X,{children:Object(Ke.jsx)(Ye,{children:Object(Ke.jsx)(Ue,{children:n})})})})})};var Je=i(35),ze=i(10);const Ze={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetPoolByAssets"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"pool"},name:{kind:"Name",value:"pools"},arguments:[{kind:"Argument",name:{kind:"Name",value:"assetIds"},value:{kind:"ListValue",values:[{kind:"Variable",name:{kind:"Name",value:"assetInId"}},{kind:"Variable",name:{kind:"Name",value:"assetOutId"}}]}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetInId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetOutId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"repayTarget"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetAWeights"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetBWeights"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startBlock"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"endBlock"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"fee"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"numerator"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"denominator"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:612,source:{body:"query GetPoolByAssets($assetInId: String!, $assetOutId: String!) {\n    lastBlock @client {\n        parachainBlockNumber\n    }\n    \n    pool: pools(assetIds: [$assetInId, $assetOutId]) @client {\n        id,\n        assetInId,\n        assetOutId,\n        balances {\n            assetId,\n            balance\n        },\n\n        # TODO: investigate how caching works when these fields are missing for XYK pools\n        # lbp fields,\n        repayTarget,\n        assetAWeights,\n        assetBWeights,\n        startBlock,\n        endBlock,\n        fee {\n            numerator,\n            denominator\n        }\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},en=e=>{let{assetIdInputProps:n,assetAmountInputProps:i,disabled:t}=e;return Object(Ke.jsxs)("div",{children:[Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("b",{children:"AssetId:"})," ",Object(Ke.jsx)("br",{}),Object(Ke.jsx)("input",{disabled:t,type:"text",...n})]}),Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("b",{children:"Asset amount:"})," ",Object(Ke.jsx)("br",{}),Object(Ke.jsx)("input",{disabled:t,type:"text",...i})]})]})},nn=new ge.a(10).pow(12),tn=(new ge.a(10).pow(18),e=>e&&new ge.a(e).dividedBy(nn).toFixed(12)),an=new ge.a(10).pow(12),sn=(new ge.a(10).pow(18),e=>e&&new ge.a(e).multipliedBy(an).toFixed(0));var dn=i(116);const ln=(e,n)=>{var i,a;const[s,d]=Object(t.useState)(!1),l=null===(i=e.control._fields[n])||void 0===i||null===(a=i._f)||void 0===a?void 0:a.ref;return Object(t.useEffect)((()=>{if(!l)return;const e=null===l||void 0===l?void 0:l.addEventListener("input",(()=>d((e=>!e))));return()=>null===l||void 0===l?void 0:l.removeEventListener("input",e)}),[l]),s};var on=i(205);const rn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"SubmitTrade"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInAmount"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutAmount"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"amountWithSlippage"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"poolType"}},type:{kind:"NamedType",name:{kind:"Name",value:"PoolType"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"tradeType"}},type:{kind:"NamedType",name:{kind:"Name",value:"TradeType"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"submitTrade"},arguments:[{kind:"Argument",name:{kind:"Name",value:"assetInId"},value:{kind:"Variable",name:{kind:"Name",value:"assetInId"}}},{kind:"Argument",name:{kind:"Name",value:"assetOutId"},value:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}}},{kind:"Argument",name:{kind:"Name",value:"tradeType"},value:{kind:"Variable",name:{kind:"Name",value:"tradeType"}}},{kind:"Argument",name:{kind:"Name",value:"poolType"},value:{kind:"Variable",name:{kind:"Name",value:"poolType"}}},{kind:"Argument",name:{kind:"Name",value:"assetInAmount"},value:{kind:"Variable",name:{kind:"Name",value:"assetInAmount"}}},{kind:"Argument",name:{kind:"Name",value:"assetOutAmount"},value:{kind:"Variable",name:{kind:"Name",value:"assetOutAmount"}}},{kind:"Argument",name:{kind:"Name",value:"amountWithSlippage"},value:{kind:"Variable",name:{kind:"Name",value:"amountWithSlippage"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}]}]}}],loc:{start:0,end:505,source:{body:"mutation SubmitTrade(\n    $assetInId: String!, \n    $assetOutId: String!,\n    $assetInAmount: String!,\n    $assetOutAmount: String!,\n    $amountWithSlippage: String!,\n    $poolType: PoolType,\n    $tradeType: TradeType\n) {\n    submitTrade(\n        assetInId: $assetInId\n        assetOutId: $assetOutId,\n        tradeType: $tradeType,\n        poolType: $poolType,\n        assetInAmount: $assetInAmount,\n        assetOutAmount: $assetOutAmount,\n        amountWithSlippage: $amountWithSlippage\n    ) @client\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},cn=(e,n,i,a)=>{const[s]=Object(on.a)(rn,{notifyOnNetworkStatusChange:!0});return Object(t.useCallback)((t=>{let{assetInId:d,assetOutId:l,assetInAmount:o,assetOutAmount:r}=t;if(!a)throw new Error("Can't submit a trade mutation without a pool");if(o=sn(o),r=sn(r),!d||!l||!o||!r||!(null===i||void 0===i?void 0:i.spotPriceAmount))throw new Error("Can't submit a trade mutation without all the required arguments");const u=((e,n,i)=>{let t=new ge.a(e).multipliedBy(new ge.a(n).dividedBy(100));const a=new ge.a(e);return(i===De.Buy?a.plus(t):a.minus(t)).toFixed(0)})(null===i||void 0===i?void 0:i.spotPriceAmount,n,e);c.a.debug("TradeForm.useHandleSubmit","amountWithSlippage",{spotPriceAmount:i.spotPriceAmount,amountWithSlippage:u,tradeType:e});const m="LBPPool"===a.__typename?Pe.LBP:Pe.XYK;s({variables:{tradeType:e,assetInId:d,assetInAmount:o,assetOutId:l,assetOutAmount:r,amountWithSlippage:u,poolType:m}})}),[s,a,e,i])},un=(e,n,i,t,a)=>{var s,d;const l=null===(s=Object(u.find)(n.balances,{assetId:i}))||void 0===s?void 0:s.balance,o=null===(d=Object(u.find)(n.balances,{assetId:t}))||void 0===d?void 0:d.balance;if(!l||!o)throw new Error("Can't find the required balances in the pool");return((e,n,i,t)=>e.xyk.calculate_out_given_in(n,i,t))(e,l,o,a)},mn=(e,n,i)=>{var t,a;return{assetABalance:null===(t=Object(u.find)(e.balances,{assetId:n}))||void 0===t?void 0:t.balance,assetBBalance:null===(a=Object(u.find)(e.balances,{assetId:i}))||void 0===a?void 0:a.balance}},vn=(e,n,i)=>({assetInWeight:n===e.assetInId?e.assetAWeights.current:e.assetBWeights.current,assetOutWeight:i===e.assetOutId?e.assetBWeights.current:e.assetAWeights.current}),pn=(e,n,i,t,a)=>{const{assetABalance:s,assetBBalance:d}=mn(n,i,t);if(!s||!d)throw new Error("Can't find the required balances in the pool");const{assetInWeight:l,assetOutWeight:o}=vn(n,i,t);return((e,n,i,t,a,s)=>e.lbp.calculate_in_given_out(n,i,t,a,s))(e,s,d,l,o,a)},kn=(e,n,i,t,a)=>{const{assetABalance:s,assetBBalance:d}=mn(n,i,t);if(!s||!d)throw new Error("Can't find the required balances in the pool");const{assetInWeight:l,assetOutWeight:o}=vn(n,i,t);return((e,n,i,t,a,s)=>e.lbp.calculate_out_given_in(n,i,t,a,s))(e,s,d,l,o,a)},yn=(e,n,i,t,a)=>{const{assetABalance:s,assetBBalance:d}=mn(n,i,t);if(!s||!d)throw new Error("Can't find the required balances in the pool");return((e,n,i,t)=>e.xyk.calculate_in_given_out(n,i,t))(e,s,d,a)},bn=(e,n,i)=>{const t=[e.assetInId,e.assetOutId];return t.includes(n)&&t.includes(i)},gn=(e,n)=>{if(!e||!n)return;const i=new ge.a(e);return new ge.a(n).minus(i).dividedBy(i)},Nn=(e,n,i)=>{const t=new ge.a(e).multipliedBy(tn(i)).toFixed(0),a=gn(t,n);if(!a||a.isNaN())return;ge.a.config({ROUNDING_MODE:ge.a.ROUND_UP});return{percentualSlippage:new ge.a(a).multipliedBy(100).abs().toFixed(10),spotPriceAmount:t}},fn=(e,n,i,t)=>{if((null===n||void 0===n?void 0:n.aToB)&&(null===n||void 0===n?void 0:n.bToA)&&i&&t)return Nn.apply(null,e===De.Buy?[n.bToA,i,t]:[n.aToB,t,i])};var On=i(210);var hn={appName:"basilisk-ui",xykFee:{numerator:"2",denominator:"1000"}};const jn=e=>new ge.a(e.numerator).dividedBy(e.denominator).multipliedBy("100").toFixed(2),In=e=>e?"XYKPool"===e.__typename?hn.xykFee:e.fee:void 0,Sn="5",Tn="5",An=(e,n)=>{const i=e.watch("autoSlippage"),a=Object(t.useMemo)((()=>e.getValues("autoSlippage")),[i]);return Object(t.useEffect)((()=>{if(!a)return;const i=n?"XYKPool"===(null===n||void 0===n?void 0:n.__typename)?Sn:Tn:Sn,t=(s=i,(d=In(n))?new ge.a(s).plus(jn(d)).toFixed(2):s);var s,d;c.a.debug("TradeForm.useCalculateAllowedSlippage","allowedSlippageWithFee",t),e.setValue("allowedSlippage",t)}),[n,a]),{allowedSlippageInputDisabled:a}},Bn=e=>{let{pool:n,loading:i,onAssetIdsChange:a,assetIds:s,spotPrice:d}=e;const l=(e=>{let{assetInId:n,assetOutId:i}=e;return Object(dn.a)({defaultValues:{assetInId:n,assetOutId:i,assetInAmount:"0",assetOutAmount:"0",allowedSlippage:"5",autoSlippage:!0}})})(s),o=(e=>{const n=In(e);if(n)return jn(n)})(n),r=(e=>{const[n,i]=Object(t.useState)(De.Sell),a=ln(e,"assetInAmount"),s=ln(e,"assetInId"),d=ln(e,"assetOutAmount"),l=ln(e,"assetOutId");return Object(t.useEffect)((()=>{c.a.debug("TradeForm.setTradeType",De.Sell),i(De.Sell)}),[a,s]),Object(t.useEffect)((()=>{c.a.debug("TradeForm.setTradeType",De.Buy),i(De.Buy)}),[d,l]),n})(l);((e,n)=>{const[i,a]=e.watch(["assetInId","assetOutId"]);Object(t.useEffect)((()=>{c.a.debug("TradeForm.useHandleAssetIdsChange",i,a),n(i,a)}),[i,a])})(l,a),((e,n,i)=>{const{math:a}=ke();let[s,d]=e.watch(["assetInId","assetInAmount"]),[l,o]=e.watch(["assetOutId","assetOutAmount"]);d=sn(d),o=sn(o);const r=Object(t.useMemo)((()=>"XYKPool"===(null===i||void 0===i?void 0:i.__typename)?un:kn),[i]),u=Object(t.useMemo)((()=>"XYKPool"===(null===i||void 0===i?void 0:i.__typename)?yn:pn),[i]);Object(t.useEffect)((()=>{if(!i||!a||!l||!d)return;if(!bn(i,s,l))return;if(n!==De.Sell)return;const t=r(a,i,s,l,d);c.a.debug("TradeForm.useCalculateInAndOut","outAmount",t),e.setValue("assetOutAmount",tn(t))}),[d,s,l,n,i]),Object(t.useEffect)((()=>{if(!i||!a||!l||!o)return;if(!bn(i,s,l))return;if(n!==De.Buy)return;const t=u(a,i,s,l,o);c.a.debug("TradeForm.useCalculateInAndOut","inAmount",tn(t)),e.setValue("assetInAmount",tn(t))}),[o,s,l,n,i])})(l,r,n),((e,n)=>{const i=Object(On.a)(null===n||void 0===n?void 0:n.id);Object(t.useEffect)((()=>{Object(u.isEqual)(i,null===n||void 0===n?void 0:n.id)||(e.resetField("assetInAmount"),e.resetField("assetOutAmount"))}),[i,null===n||void 0===n?void 0:n.id])})(l,n);const m=fn(r,d,sn(l.getValues("assetInAmount")),sn(l.getValues("assetOutAmount"))),v=cn(r,l.getValues("allowedSlippage"),m,n),{allowedSlippageInputDisabled:p}=An(l,n);return Object(Ke.jsx)("div",{children:Object(Ke.jsxs)("form",{onSubmit:l.handleSubmit(v),children:[Object(Ke.jsx)("p",{children:r}),Object(Ke.jsx)(en,{assetIdInputProps:l.register("assetInId"),assetAmountInputProps:l.register("assetInAmount")}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)(en,{assetIdInputProps:l.register("assetOutId"),assetAmountInputProps:l.register("assetOutAmount")}),Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("b",{children:"Allowed slippage"}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("input",{type:"text",disabled:p,...l.register("allowedSlippage")}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("b",{children:"Auto slippage"}),Object(Ke.jsx)("input",{type:"checkbox",...l.register("autoSlippage")})]}),Object(Ke.jsx)("br",{}),Object(Ke.jsxs)("p",{children:[Object(Ke.jsx)("b",{children:"Slippage:"})," ",null===m||void 0===m?void 0:m.percentualSlippage," / ",tn(null===m||void 0===m?void 0:m.spotPriceAmount)]}),Object(Ke.jsxs)("p",{children:[Object(Ke.jsx)("b",{children:"Fee:"})," ",o,"%"]}),Object(Ke.jsx)("button",{disabled:i,type:"submit",children:"Trade"})]})})},xn=e=>{let{spotPrice:n,poolLiquidity:i}=e;return Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("p",{children:"TradeChart"}),Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("b",{children:"Spot price"}),Object(Ke.jsx)("br",{}),Object(Ke.jsxs)("span",{children:["1 A = ",tn(null===n||void 0===n?void 0:n.aToB),"B"]}),Object(Ke.jsx)("br",{}),Object(Ke.jsxs)("span",{children:["1 B = ",tn(null===n||void 0===n?void 0:n.bToA),"A"]}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("b",{children:"Pool liquidity"}),Object(Ke.jsx)("br",{}),Object(Ke.jsxs)("span",{children:["A = ",tn(i.assetABalance)]}),Object(Ke.jsx)("br",{}),Object(Ke.jsxs)("span",{children:["B = ",tn(i.assetBBalance)]}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("br",{})]})]})},wn="1000000000000",Pn=(e,n,i,t)=>{var a,s;const d=null===(a=Object(u.find)(n.balances,{assetId:i}))||void 0===a?void 0:a.balance,l=null===(s=Object(u.find)(n.balances,{assetId:t}))||void 0===s?void 0:s.balance;if(!d||!l)throw new Error("Can't find the required balances in the pool");return function(e,n,i,t,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:wn;return e.lbp.get_spot_price(n,i,t,a,s)}(e,d,l,i===n.assetInId?n.assetAWeights.current:n.assetBWeights.current,t===n.assetOutId?n.assetBWeights.current:n.assetAWeights.current)},Dn=(e,n,i,t)=>{var a,s;const d=null===(a=Object(u.find)(n.balances,{assetId:i}))||void 0===a?void 0:a.balance,l=null===(s=Object(u.find)(n.balances,{assetId:t}))||void 0===s?void 0:s.balance;if(d&&l)return((e,n,i)=>e.xyk.get_spot_price(n,i,wn))(e,d,l)},Fn=()=>{const[e,n]=Object(t.useState)({assetInId:"0",assetOutId:"2"}),{data:i,loading:a,error:s}=(d=e,Object(m.a)(Ze,{variables:d,notifyOnNetworkStatusChange:!0}));var d;c.a.debug("TradePage.useGetPoolByAssetsQuery",e);const l=Object(t.useMemo)((()=>null===i||void 0===i?void 0:i.pool),[null===i||void 0===i?void 0:i.pool]);s&&c.a.error(s);const o=Object(t.useMemo)((()=>{const e=a;return c.a.debug("TradePage.loading",e),e}),[a]);c.a.debug("TradePage.poolData.pool",null===i||void 0===i?void 0:i.pool);const r=((e,n)=>{let{assetInId:i,assetOutId:a}=e;const s=Object($.a)(),d=he(s),{math:l}=ke();return Object(t.useMemo)((()=>{if(!l||!n||!i||!a||!d)return;const e="XYKPool"===(null===n||void 0===n?void 0:n.__typename)?Dn:Pn,t={aToB:e(l,n,i,a),bToA:e(l,n,a,i)};return c.a.debug("TradePage.useSpotPrice",t),t}),[d,i,a,n])})(e,null===i||void 0===i?void 0:i.pool),v=Object(t.useMemo)((()=>{var n,i;return{assetABalance:null===(n=Object(u.find)(null===l||void 0===l?void 0:l.balances,{assetId:e.assetInId}))||void 0===n?void 0:n.balance,assetBBalance:null===(i=Object(u.find)(null===l||void 0===l?void 0:l.balances,{assetId:e.assetOutId}))||void 0===i?void 0:i.balance}}),[l]);return Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("h1",{children:"Trade"}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)(xn,{poolLiquidity:v,spotPrice:r}),Object(Ke.jsx)(Bn,{onAssetIdsChange:(i,t)=>{const a={assetInId:i,assetOutId:t};c.a.debug("TradePage.handleAssetIdsChange",Object(u.isEqual)(e,a),a),Object(u.isEqual)(e,a)||n(a)},assetIds:e,loading:o,pool:l,spotPrice:r})]})},_n={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"SetActiveAccount"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"setActiveAccount"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}]}]}}],loc:{start:0,end:80,source:{body:"mutation SetActiveAccount($id: String) {\n    setActiveAccount(id: $id) @client\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Cn=e=>Object(on.a)(_n,{variables:e,refetchQueries:[J]}),En=e=>{let{account:n}=e;const[i]=Cn({id:null===n||void 0===n?void 0:n.id}),[t]=Cn({id:void 0});return Object(Ke.jsxs)("div",{style:{marginBottom:"24px",padding:"12px",paddingLeft:0},children:[Object(Ke.jsxs)("h3",{children:[null===n||void 0===n?void 0:n.name,(null===n||void 0===n?void 0:n.isActive)?" [active]":Object(Ke.jsx)(Ke.Fragment,{})]}),Object(Ke.jsxs)("p",{children:[Object(Ke.jsx)("b",{children:"Address:"}),null===n||void 0===n?void 0:n.id]}),Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("b",{children:"Balances:"}),null===n||void 0===n?void 0:n.balances.map(((e,n)=>Object(Ke.jsxs)("p",{children:[e.assetId,":",Object(Ke.jsxs)("i",{children:[" ",e.balance]})]},n)))]}),Object(Ke.jsx)("button",{onClick:e=>(null===n||void 0===n?void 0:n.isActive)?t():i(),children:(null===n||void 0===n?void 0:n.isActive)?"Unset active":"Set active"})]})},Ln=()=>{var e;const{data:n,loading:i}=Object(m.a)(v,{notifyOnNetworkStatusChange:!0}),{data:a,loading:s}=Re(),d=Object(t.useMemo)((()=>i||s),[i,s]);return Object(Ke.jsxs)("div",{style:{textAlign:"left"},children:[Object(Ke.jsx)("h1",{children:"Accounts"}),d?Object(Ke.jsx)("i",{children:"[WalletPage] Loading accounts..."}):Object(Ke.jsx)("i",{children:"[WalletPage] Everything is up to date"}),Object(Ke.jsx)("br",{}),Object(Ke.jsx)("br",{}),(null===a||void 0===a?void 0:a.extension.isAvailable)?Object(Ke.jsx)("div",{children:null===n||void 0===n||null===(e=n.accounts)||void 0===e?void 0:e.map(((e,n)=>Object(Ke.jsx)(En,{account:e},n)))}):Object(Ke.jsx)("p",{children:"Extension unavailable"})]})},Vn=()=>Object(Ke.jsxs)(ze.d,{children:[Object(Ke.jsx)(ze.b,{path:"/",element:Object(Ke.jsx)(Fn,{})}),Object(Ke.jsx)(ze.b,{path:"wallet",element:Object(Ke.jsx)(Ln,{})}),Object(Ke.jsx)(ze.b,{path:"*",element:Object(Ke.jsx)(ze.a,{to:"/"})})]});i(171);const qn=e=>{let{extensionLoading:n,activeAccountLoading:i,accountData:t,isExtensionAvailable:a}=e;return Object(Ke.jsxs)("div",{className:"action-bar",children:[Object(Ke.jsxs)("div",{className:"action-bar-icons action-bar-item",children:[Object(Ke.jsx)("div",{className:"action-bar-help action-bar-icon ",children:"?"}),Object(Ke.jsx)("div",{className:"action-bar-notifications action-bar-icon ",children:"!"})]}),Object(Ke.jsx)("div",{children:n||i?Object(Ke.jsx)("div",{className:"action-bar-error action-bar-item",children:"loading..."}):a?Object(Ke.jsx)(Ke.Fragment,{children:(null===t||void 0===t?void 0:t.name)?Object(Ke.jsxs)("div",{className:"action-bar-account-info action-bar-item",children:[Object(Ke.jsxs)("div",{className:"action-bar-account-balance action-bar-account-item",children:[null===t||void 0===t?void 0:t.nativeAssetBalance," BSX"]}),Object(Ke.jsx)("div",{className:"action-bar-account-name action-bar-account-item",children:null===t||void 0===t?void 0:t.name})]}):Object(Ke.jsx)(Je.b,{className:"action-bar-select-account action-bar-item",to:"/wallet",children:"select an account"})}):Object(Ke.jsx)("div",{className:"action-bar-error action-bar-item",children:"Extension unavailable"})}),Object(Ke.jsx)("div",{className:"action-bar-settings action-bar-item",children:"v"})]})};i(172);const Wn=()=>Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)(Je.b,{className:"basilisk-logo",to:"https://bsx.fi",children:"()"}),Object(Ke.jsx)(Je.b,{to:"/",children:"Trade"})," | ",Object(Ke.jsx)(Je.b,{to:"/",children:"Pools"})," | ",Object(Ke.jsx)(Je.b,{to:"/wallet",children:"Wallet"})]});i(173);const Qn=()=>{var e,n,i,a;const{data:s}=Object(m.a)(R),{data:d,loading:l,error:o}=z(),{data:r,loading:c}=Re();o&&console.error(o);const v=Object(t.useMemo)((()=>{var e,n,i;return null===(e=Object(u.first)(null===d||void 0===d||null===(n=d.account)||void 0===n||null===(i=n.balances)||void 0===i?void 0:i.filter((e=>e.assetId===F))))||void 0===e?void 0:e.balance}),[d]);return Object(Ke.jsxs)("div",{className:"top-bar",children:[Object(Ke.jsx)(Wn,{}),Object(Ke.jsxs)("div",{children:[Object(Ke.jsx)("b",{children:"Last block: "}),(null===s||void 0===s||null===(e=s.lastBlock)||void 0===e?void 0:e.parachainBlockNumber)?"#".concat(null===s||void 0===s||null===(n=s.lastBlock)||void 0===n?void 0:n.parachainBlockNumber," / #").concat(null===s||void 0===s||null===(i=s.lastBlock)||void 0===i?void 0:i.relaychainBlockNumber):"loading..."]}),Object(Ke.jsx)(qn,{isExtensionAvailable:!!r&&!!(null===(a=r.extension)||void 0===a?void 0:a.isAvailable),extensionLoading:c,activeAccountLoading:l,accountData:d?{name:d.account&&d.account.name?d.account.name:void 0,nativeAssetBalance:v,address:"placeholder fill me"}:void 0})]})},Mn=e=>{let{children:n}=e;const i=(()=>{const{apiInstance:e}=D(),{math:n}=ke();return!e||!n})();return Object(Ke.jsxs)("div",{style:{padding:"24px",width:"650px",margin:"0 auto"},children:[Object(Ke.jsx)(Qn,{}),i?Object(Ke.jsx)("div",{style:{width:"100%",textAlign:"center"},children:Object(Ke.jsx)("i",{children:"Connecting to the node..."})}):n]})};c.a.setLevel("debug");const Gn=Object({NODE_ENV:"production",PUBLIC_URL:".",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_NODE_URL:"ws://localhost:9988",REACT_APP_PROCESSOR_URL:"/graphql",REACT_APP_APP_NAME:"Basilisk UI"}).REACT_APP_GIT_BRANCH;(null===Gn||void 0===Gn?void 0:Gn.length)&&"/basilisk-ui/".concat(Gn,"/app");var Rn=()=>Object(Ke.jsx)($e,{children:Object(Ke.jsx)(Je.a,{children:Object(Ke.jsx)(Mn,{children:Object(Ke.jsx)(Vn,{})})})});var Xn=e=>{e&&e instanceof Function&&i.e(5).then(i.bind(null,217)).then((n=>{let{getCLS:i,getFID:t,getFCP:a,getLCP:s,getTTFB:d}=n;i(e),t(e),a(e),s(e),d(e)}))};i(174);s.a.render(Object(Ke.jsx)(Rn,{}),document.getElementById("root")),Xn()},64:function(e,n){}},[[175,1,2]]]);
//# sourceMappingURL=main.01b0910e.chunk.js.map